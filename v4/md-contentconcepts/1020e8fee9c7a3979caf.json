{"id":"concepts","title":"Concepts","contents":"<h1 id=\"ngrid-concepts\"><a href=\"#ngrid-concepts\" aria-hidden><span class=\"icon icon-link\"></span></a>NGrid concepts</h1>\n<p>The core concept of n<strong>Grid</strong> is <strong>simplicity</strong>, creating a grid should be simple and straight-forward.\nAs more features are added, complexity grows but at all times <strong>the basic operation should remain simple</strong>.</p>\n<h2 id=\"principles-to-simplicity\"><a href=\"#principles-to-simplicity\" aria-hidden><span class=\"icon icon-link\"></span></a>Principles to Simplicity</h2>\n<p>To keep things simple we stick to the following principles:</p>\n<ul>\n<li>Simplicity through Transparency - Everything is optional (Except columns and rows) all features must come with a default behavior.</li>\n<li>DRY - Templates and behaviors are defined once and used throughout the application</li>\n</ul>\n<h3 id=\"simplicity-through-transparency\"><a href=\"#simplicity-through-transparency\" aria-hidden><span class=\"icon icon-link\"></span></a>Simplicity through Transparency</h3>\n<p>Like others, n<strong>Grid</strong> comes with a lot of features. Some are native, some are built-in plugins and others are through external plugins. Extensibility\nis at the core of n<strong>Grid</strong> as it allows opting-in to what you really need without introducing complexity of what you dont use or need.</p>\n<p>With each feature/plugin you use the level of complexity grows, to ensure things are kept simple all of the features are transparent which means that they\nshould not force you to provide a value and should always come with a default behavior.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n This is what we thrive for, it not guaranteed, especially not for 3rd party plugins. If you find a feature/plugin that does not follow this concept\nplease let the author know.\n</blockquote>\n<h3 id=\"dry\"><a href=\"#dry\" aria-hidden><span class=\"icon icon-link\"></span></a>DRY</h3>\n<p>DRY means <em>do not repeat yourself</em> and it's a well known principle in computer science and what drives angular (components, templates).</p>\n<p>By assigning types to columns and templates/behaviors to types we can easily reuse templates. By using 3rd party plugins we can teach the table how to\nrender and react to pre-defined columns types without writing a single line of code, just apply definitions.</p>\n<h2 id=\"the-mandatory\"><a href=\"#the-mandatory\" aria-hidden><span class=\"icon icon-link\"></span></a>The Mandatory</h2>\n<p>Ok, we have some guidelines, now what? There are 2 basic ingredients every table must have, these are <em>Columns</em> and <em>Rows</em>.  </p>\n<ul>\n<li>Columns: A collection of column definitions where each column definition defines what a cell will display (render) and how it will behave once a data is bound to it.</li>\n<li>Rows: A collection of data items (rows), sharing the same structure (usually).</li>\n</ul>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n To create an n\n<strong>Grid</strong>\n instance you only need column definitions and rows. Everything else is optional, adding more features at the cost of greater complexity.\n</blockquote>\n<h3 id=\"column-definitions\"><a href=\"#column-definitions\" aria-hidden><span class=\"icon icon-link\"></span></a>Column Definitions</h3>\n<p>For every column, there are <strong>a lot</strong> of definitions we can set. These definitions help us define how the column will look and behave in different scenarios but at the most basic level, all a column needs to know about is the path on the data item (row) to get the data from.</p>\n<p>n<strong>Grid</strong> provide the factory function <code class=\"language-text\">columnFactory()</code> that help you create column definition sets, you will end up using it 99.99% of the times.</p>\n<p>Of course, simple is not enough, we love features and customization... You can read more about <a href=\"./columns/quick-through\">Columns</a> and how to configure them.</p>\n<h3 id=\"data-source-rows\"><a href=\"#data-source-rows\" aria-hidden><span class=\"icon icon-link\"></span></a>Data Source (rows)</h3>\n<p>A data source has <strong>a lot</strong> of options which help us define how will look and behave in different scenarios but at the most basic level, all a\ndatasource needs to know is to return an array of data.</p>\n<p>n<strong>Grid</strong> provide the factory function <code class=\"language-text\">createDS()</code> that help you create datasource instance's very easily, you will end up using it 99.99% of the times.</p>\n<p>Of course, simple is not enough, we love features and customization... You can read more about <a href=\"./datasource/quick-through\">Data Source</a> and how to configure them.</p>\n"}