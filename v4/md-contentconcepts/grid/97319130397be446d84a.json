{"id":"concepts/grid/the-registry","title":"The Registry","contents":"<h1 id=\"the-registry\"><a href=\"#the-registry\" aria-hidden><span class=\"icon icon-link\"></span></a>The Registry</h1>\n<p>The registry is a store for UI elements rendering instructions, from here on <strong>entry / entries</strong>.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Moving forward, when ever you see the word entry or entries and don't understand it just replace it with \n<strong>template</strong>\n.\nA \n<strong>template</strong>\n is just one type entry but it makes it easier to understand.\n</blockquote>\n<h2 id=\"why\"><a href=\"#why\" aria-hidden><span class=\"icon icon-link\"></span></a>Why</h2>\n<p>Entries are reusable, a single entry can be used across the app, defined once and stored for reuse.</p>\n<p>The most obvious example is the cell template:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridCellDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>*<span class=\"token punctuation\">'</span>; value as value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ value }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>In the example above we define a template that will be used by the grid to render the content of a cell.</p>\n<p>Now let's get more specific:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridCellTypeDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>number<span class=\"token punctuation\">'</span>; value as value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ value | number:'1.0-2' }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridCellDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>*<span class=\"token punctuation\">'</span>; value as value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ value }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>Now we also have a template for rendering cells which belong to a column that is of type <code class=\"language-text\">number</code>.</p>\n<p>Now, if we want to create another grid in the same page or in another page we will have to re-define the template again.\nThis is a redundant, mundane and error prone, we can define it once and reuse it in all of the grid's.</p>\n<p>This is why we need a registry, to save all the templates so they can be used across the application.</p>\n<h2 id=\"registry-slots\"><a href=\"#registry-slots\" aria-hidden><span class=\"icon icon-link\"></span></a>Registry Slots</h2>\n<p>A registry slot (also referred to as <code class=\"language-text\">kind</code>) is a place in the registry that can store one (single) or more (multi) registry\nentries which are used to render a UI element.</p>\n<p>The slot has a kind, a unique name/id, which describes what is role of the UI element that should be rendered.</p>\n<p>For example, the <code class=\"language-text\">tableCell</code> slot is a multi-entry slot that holds entries that will be rendered as <strong>cell items</strong> in the grid.<br>\nThe <code class=\"language-text\">headerCell</code> slot is a multi-entry slot that holds entries that will be rendered as <strong>cell header items</strong> in the grid.</p>\n<p>NGrid comes with a pre-defined list of slots, ready to be defined by the developer, allowing the creation of a completely custom UI.</p>\n<p>In addition, extensions/plugins can add their own slot opening for the user to define, which also allow custom UI implementations\nfor the plugin/extension.</p>\n<p>For example, the <code class=\"language-text\">BlockUI</code> extension opens the single-entry slot <code class=\"language-text\">blocker</code> that holds the UI element to be rendered when the grids\nis busy.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n A slot can hold more then just the UI definition (e.g. template), it can also hold metadata required for rendering. For example the\n\n<code class=\"language-text\">tableCell</code>\n slot contains the id or type of the column it belongs to.\n</blockquote>\n<h3 id=\"strictly-typed-slots\"><a href=\"#strictly-typed-slots\" aria-hidden><span class=\"icon icon-link\"></span></a>Strictly Typed Slots</h3>\n<p>The list of allowed slots is type-manged at design-time using Typescript's mapped type so adding a new slot definition will require interface augmentation.</p>\n<p>The allowed slot <code class=\"language-text\">kind</code>s are the keys of <code class=\"language-text\">PblNgridSingleRegistryMap</code> for single-entry slots and <code class=\"language-text\">PblNgridMultiRegistryMap</code> for multi-entry slots.</p>\n<h2 id=\"single--multi-entry-slots\"><a href=\"#single--multi-entry-slots\" aria-hidden><span class=\"icon icon-link\"></span></a>Single &#x26; Multi Entry Slots</h2>\n<p>A <strong>single entry</strong> slot can hold only one entry per registry level at a time, each new slot will overwrite the previous one.</p>\n<p>A <strong>multi entry</strong> slot can hold a collection of slots. For example, a collection of cell templates each maps to a column in the grid.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Remember that the registry is just a simple storage, actual implementation of slot entries is up to the creator of the slot.\nIn theory, one could create a JSON slot that holds instruction on how to render a UI element and implement a renderer for that format.\n</blockquote>\n<p>Some examples, in the cell template domain we have 4 kinds:</p>\n<ul>\n<li><strong>headerCell</strong> - Cell templates for the column header cell</li>\n<li><strong>tableCell</strong> - Cell templates for the column cell</li>\n<li><strong>editorCell</strong> - Cell templates for the column cell in edit mode</li>\n<li><strong>footerCell</strong> - Cell templates for the column footer cell</li>\n</ul>\n<p>Of course, all of the kinds are <strong>multi</strong>.</p>\n<h2 id=\"registry-hierarchy\"><a href=\"#registry-hierarchy\" aria-hidden><span class=\"icon icon-link\"></span></a>Registry Hierarchy</h2>\n<p>The registry is made up of multiple sub-registry built in hierarchy similar to how dependency injection works in angular.</p>\n<p>There are 2 things to remember:</p>\n<ul>\n<li>An application will have a single, root registry</li>\n<li>Each instance will have a unique registry instance</li>\n</ul>\n<p>This means that each grid has an access to a unique registry that is connected to a parent registry.\nThe parent might be the root but might also be another registry which points to a parent, going up to the root.</p>\n<p>When the grid wants to render a cell it will search for the template attached to the column of the cell.</p>\n<p>For example, if the column is of type <code class=\"language-text\">number</code> it will search in the registry for a <strong>type cell template</strong> for the type `number.\nThe first lookup will be in the registry of the grid, if not found it will search the parent going up to the root.</p>\n<p>This structure is very flexible:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridCellTypeDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>number<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>ABC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridCellTypeDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>number<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>123<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>The example above is the template of a component, which render 2 grid's.<br>\nThere are 2 type cell templates, an orphan one, outside of any grid (rendering <code class=\"language-text\">ABC</code>) and one inside a grid (rendering <code class=\"language-text\">123</code>).</p>\n<p>The first grid:</p>\n<ul>\n<li>Search's for the type cell template for <code class=\"language-text\">number</code></li>\n<li>Find's a match that will render <code class=\"language-text\">123</code></li>\n</ul>\n<p>The second grid:</p>\n<ul>\n<li>Search's for the type cell template for <code class=\"language-text\">number</code></li>\n<li>No match found in the unique registry, will now search in the parent</li>\n<li>Find's a match that will render <code class=\"language-text\">ABC</code></li>\n</ul>\n<p>In the first grid we are overwriting the definition, only for this grid.</p>\n<h3 id=\"template-lifetime\"><a href=\"#template-lifetime\" aria-hidden><span class=\"icon icon-link\"></span></a>Template lifetime</h3>\n<p>Each template registered in the registry is bound to the host it is defined in.</p>\n<p>For templates defined in the content of the grid:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridCellTypeDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>number<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>123<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>Simple, once the grid is gone it's registry is gone and so all templates are gone.</p>\n<p>In the previous example, we had a template defined in the component:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridCellTypeDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>number<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>ABC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>Now, the registry is not unique, it might be the root or some other registry we defined in between.<br>\nHowever, when the component is destroyed the template is also destroyed and removed from the registry.</p>\n<h3 id=\"real-global-templates\"><a href=\"#real-global-templates\" aria-hidden><span class=\"icon icon-link\"></span></a>Real global templates</h3>\n<p>To really leverage the power of the registry it is best to define all template close to the root component of your application.</p>\n<p>This can be done by defining the templates on the root component itself or by defining them on a component used in the root template.</p>\n<h2 id=\"registry-entity-types\"><a href=\"#registry-entity-types\" aria-hidden><span class=\"icon icon-link\"></span></a>Registry Entity Types</h2>\n<p>In all of the examples above we've demonstrated registry entries that are\nregistered and defined through templates.</p>\n<p>However, there is another type of registry entity we can use, a <strong>Component based entry</strong>.</p>\n<p>With <strong>Template based entries</strong> we are able to use the angular template syntax to quickly define and register them in the registry but\n<strong>Component based entries</strong> require registration through runtime code.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n You can logically compare the two with \n<code class=\"language-text\">*ngTemplateOutlet</code>\n and \n<code class=\"language-text\">*ngComponentOutlet</code>\n.\n</blockquote>\n<h3 id=\"template-based-registry-entries\"><a href=\"#template-based-registry-entries\" aria-hidden><span class=\"icon icon-link\"></span></a>Template Based Registry Entries</h3>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridCellDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>name<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>ABC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>In the example above, <code class=\"language-text\">*pblNgridCellDef</code> is a <a href=\"https://angular.io/guide/structural-directives\" target=\"_blank\">structural directive</a> that automatically register the template for us in the registry.</p>\n<p>Or, in other words, in the html snippet above, <code class=\"language-text\">pblNgridCellDef</code> will extract the template:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>ABC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-template</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>And register it in the registry as a cell template (<code class=\"language-text\">tableCell</code>) for the column with the id <code class=\"language-text\">name</code>.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">registry<span class=\"token punctuation\">.</span><span class=\"token function\">addMulti</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tableCell'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>Another example:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridHeaderCellDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>name<span class=\"token punctuation\">'</span>; col as col;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{col.label}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>In the html snippet above, <code class=\"language-text\">pblNgridHeaderCellDef</code> will extract the template:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-template</span> <span class=\"token attr-name\">let-col</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>{{col.label}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-template</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>And register it in the registry as a cell <strong>header</strong> template (<code class=\"language-text\">headerCell</code>) for the column with the id <code class=\"language-text\">name</code>.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">registry<span class=\"token punctuation\">.</span><span class=\"token function\">addMulti</span><span class=\"token punctuation\">(</span><span class=\"token string\">'headerCell'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<h3 id=\"component-based-registry-entries\"><a href=\"#component-based-registry-entries\" aria-hidden><span class=\"icon icon-link\"></span></a>Component Based Registry Entries</h3>\n<p>A component based entry is used for rendering UI elements based on angular components.<br>\nIt serves as a close unit for creating, rendering and updating the component it encapsulates.</p>\n<p>Because it is a bit more complex to define, n most cases, the implementation and use of these entries are hidden from the end-user.</p>\n<p>Component based entries are good in cases where the UI implementation already exists as a component or when the rendered content\nshould wrap (project content) an existing, already rendered content.</p>\n<p>A good example is the <code class=\"language-text\">MatSort</code> component from the <code class=\"language-text\">@angular/material/sort</code> package.<br>\nWe would want to use it within a header cell, to wrap the cell and show the current sorting state while handling clicks to change the sort state.</p>\n<p><code class=\"language-text\">MatSort</code> is an already existing sorting solution, tested and working and it requires wrapping the cell's content, a perfect fit for a component based entry.</p>\n<p>To see how it is implemented, see the code for <code class=\"language-text\">@pebula/ngrid-material/sort</code>.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n The entity type of each slot is defined by the slot's creator. Most slots support template based entries, some support component based and some support \n<strong>both</strong>\n</blockquote>\n<h2 id=\"the-date-header-extensions-slot\"><a href=\"#the-date-header-extensions-slot\" aria-hidden><span class=\"icon icon-link\"></span></a>The Date Header Extensions Slot</h2>\n<p>This slot (kind: <code class=\"language-text\">dataHeaderExtensions</code>) is a unique slot for the main header cells which usually require the ability to extend with multiple UI elements.</p>\n<p>We will explain through a use-cae, consider a cell header that is required to:</p>\n<ul>\n<li>Show the label</li>\n<li>Show a sorting indicator (asc/desc) toggle the sort state when clicked</li>\n<li>Implement column re-order on drag in it's center</li>\n<li>Implement column re-size on drag in it's right corner</li>\n<li>Show a context menu button that will open the context menu on click</li>\n</ul>\n<p>This is a fairly complex requirement which we can implement by creating a cell template:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sort-component</span> <span class=\"token attr-name\">*pblNgridHeaderCellDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>*<span class=\"token punctuation\">'</span>; col as col;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>drag-and-reorder</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>drag-and-reorder</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>drag-and-resize</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>drag-and-resize</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>{{ col.label }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>context-menu-icon</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>context-menu-icon</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sort-component</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>Easy... but there is a problem, when we want a certain cell to have a more specific UI we will need to repeat the entire thing.<br>\nEventually, we end up with a single template and multiple copies spread around in our application, when refactor day comes - big problem.</p>\n<p><code class=\"language-text\">dataHeaderExtensions</code> to the rescue.</p>\n<p>This slot accepts <strong>both template &#x26; component based entries</strong> and renders them based on the meta instruction.</p>\n<p>First, the <code class=\"language-text\">headerCell</code> slot is rendered like it would normally render and then the rendered content is passed\non to the <code class=\"language-text\">dataHeaderExtensions</code> to be added to the rendered content of the extensions in the slot.</p>\n<p>This allows separate definitions for the <code class=\"language-text\">headerCell</code> slot, changing based on the column being processed but after that\nadding some content shared by all column.</p>\n"}