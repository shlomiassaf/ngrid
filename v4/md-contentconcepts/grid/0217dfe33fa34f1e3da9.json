{"id":"concepts/grid/browser-apis","title":"Compatibility & Browser APIs","contents":"<h1 id=\"compatibility--browser-apis\"><a href=\"#compatibility--browser-apis\" aria-hidden><span class=\"icon icon-link\"></span></a>Compatibility &#x26; Browser APIs</h1>\n<h2 id=\"compatibility\"><a href=\"#compatibility\" aria-hidden><span class=\"icon icon-link\"></span></a>Compatibility</h2>\n<p><strong>nGrid</strong> support all browsers that angular &#x26; the angular CDK support.</p>\n<h2 id=\"browser-apis\"><a href=\"#browser-apis\" aria-hidden><span class=\"icon icon-link\"></span></a>Browser APIs</h2>\n<p><strong>nGrid</strong> makes use of the following browsers APIs:</p>\n<h3 id=\"resizeobserver\"><a href=\"#resizeobserver\" aria-hidden><span class=\"icon icon-link\"></span></a>ResizeObserver</h3>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\">ResizeObserver API</a> is used to detect resize in column width's and react to them by re-calculating the new widths.</p>\n<p>The <strong>ResizeObserver API</strong> is supported in all major browsers, however it is not supported by <strong>Internet Explorer</strong><br>\nIf you require full support or want a polyfill just in case you can use one of the following polyfills:</p>\n<ul>\n<li><a href=\"https://github.com/que-etc/resize-observer-polyfill\">resize-observer-polyfill</a> - The most used polyfill (performs auto-detect)</li>\n<li><a href=\"https://github.com/juggle/resize-observer\">@juggle/resize-observer</a> - A newer, more modern polyfill (does NOT auto-detect)</li>\n</ul>\n<p>You can add them to your <code class=\"language-text\">polyfill.ts</code> file.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n There might be more differences between the 2, please read the documentation of each one for more in-depth information\n</blockquote>\n<p><strong>resize-observer-polyfill</strong> will automatically detect if the API is implemented and if not will add it so you can safely do:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'resize-observer-polyfill'</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>In your <code class=\"language-text\">polyfill.ts</code>.</p>\n<p>Note the polyfill has built-in type support (d.ts) auto-loaded when you import it, so if you already have types\nloaded for <code class=\"language-text\">ResizeObserver</code> and want to keep them, load the polyfill directly without passing through the <code class=\"language-text\">package.json</code></p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'resize-observer-polyfill/dist/ResizeObserver'</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p><strong>@juggle/resize-observer</strong> does not auto-detect so doing the above will override the native implementation, if one exists.</p>\n<p>So you should do something like this:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ResizeObserver <span class=\"token keyword\">as</span> Polyfill <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@juggle/resize-observer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'ResizeObserver'</span> <span class=\"token keyword\">in</span> window <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>ResizeObserver <span class=\"token operator\">=</span> Polyfill<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>There are more options for this polyfill, including a demo how to load it async using dynamic imports, read more at the polyfill's site.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<strong>nGrid</strong>\n makes minimal use of the API so changes in the final spec should have no effect.\n@types/resize-observer-brow\n</blockquote>\n<h3 id=\"intersectionobserver\"><a href=\"#intersectionobserver\" aria-hidden><span class=\"icon icon-link\"></span></a>IntersectionObserver</h3>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">IntersectionObserver API</a> is used for performance.</p>\n<p>It allows <strong>nGrid</strong> to get notified when a row is visible and when it is not.<br>\nWith this API <strong>nGrid</strong> can skip a lot of layout reflows and recalculations because it does not need to check if a row is out of view.<br>\nThis is very important for performance, especially when using virtual scroll.</p>\n<p>The <strong>IntersectionObserver API</strong> is a more mature API compared to the <code class=\"language-text\">ResizeObserver API</code>, it is shipped with all major browsers for a long time now\nand comes as part of the DOM type library in TypeScript.</p>\n<p>That said, it is not supported in Internet Explorer.</p>\n<p>In this case we do not provide recommendation for a polyfill, you can use any good polyfill out there or you can <strong>DISABLE</strong> the use of the API\nso <strong>nGrid</strong> will not use it to detect the changes and instead perform it's own magic for that. This will slightly degrade performance, how much\ndepends on the use case, <strong>nGrid</strong> instance configuration and features used together.</p>\n<p>To disable the use of <strong>IntersectionObserver</strong> apply the following provider in your application root module:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">DISABLE_INTERSECTION_OBSERVABLE</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/ngrid'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> provide<span class=\"token operator\">:</span> <span class=\"token constant\">DISABLE_INTERSECTION_OBSERVABLE</span><span class=\"token punctuation\">,</span> useValue<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAppRootModule</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre></div></div>\n"}