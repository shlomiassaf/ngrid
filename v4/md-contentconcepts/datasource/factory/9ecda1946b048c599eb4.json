{"id":"concepts/datasource/factory","title":"Datasource Factory","contents":"<h1 id=\"the-data-source-factory\"><a href=\"#the-data-source-factory\" aria-hidden><span class=\"icon icon-link\"></span></a>The Data Source Factory</h1>\n<p>In the <a href=\"../introduction\">introduction</a> we covered the basic functionality of the datasource factory.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dataSource <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createDS</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>We provide a function to <code class=\"language-text\">onTrigger()</code> that returns <code class=\"language-text\">DataSourceOf&lt;T&gt;</code> which is a our datasource. The function can\nreturn a local collection or call the server to get a collection.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<code class=\"language-text\">DataSourceOf</code>\n can be an Array, Promise or Observable.\n</blockquote>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n When creating a datasource, do it inside the class and apply the trigger handler using an arrow function. This will give you access to the class instance.\n</blockquote>\n<p>The factory contains internal logic that controls the trigger, calling it based on the configuration.</p>\n<h2 id=\"trigger-configuration\"><a href=\"#trigger-configuration\" aria-hidden><span class=\"icon icon-link\"></span></a>Trigger Configuration</h2>\n<p>The trigger is called when a data update is required by a source, the sources are:</p>\n<ul>\n<li>Data - The user requested an update</li>\n</ul>\n<ul>\n<li>Sort - Sort has changed and sorting trigger is enabled</li>\n<li>Filter - Filter has changed and filtering trigger is enabled</li>\n<li>Pagination - Pagination has changed and pagination trigger is enabled</li>\n</ul>\n<p>With each trigger the <code class=\"language-text\">PblDataSourceTriggerChangedEvent&lt;TData&gt;</code> object is provided, containing information about the sources for this trigger\nand any additional information available.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblDataSourceTriggerChangedEvent<span class=\"token operator\">&lt;</span>TData <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n  filter<span class=\"token operator\">:</span> PblDataSourceTriggerChange<span class=\"token operator\">&lt;</span>DataSourceFilter<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  sort<span class=\"token operator\">:</span> PblDataSourceTriggerChange<span class=\"token operator\">&lt;</span>PblNgridDataSourceSortChange<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  pagination<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    changed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    page<span class=\"token operator\">:</span> PblDataSourceTriggerChange<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    perPage<span class=\"token operator\">:</span> PblDataSourceTriggerChange<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  data<span class=\"token operator\">:</span> PblDataSourceTriggerChange<span class=\"token operator\">&lt;</span>TData<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token comment\">/**\n   * When true this is the first emission of data since the last connection.\n   */</span>\n  isInitial<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * The origin of this event, whether it is from a data request or from a custom trigger request (filter, sort and/or pagination).\n   * Additional types might be added by plugins.\n   */</span>\n  eventSource<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> PblDataSourceTriggerChangedEventSource<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * Set the total amount of data items.\n   * For use with the paginator, update the total length of data items that the current returned source is part of.\n   *\n   * Use when custom trigger for pagination is enabled (server side mode, in client side mode the length is automatically set)\n   */</span>\n  <span class=\"token function\">updateTotalLength</span><span class=\"token punctuation\">(</span>totalLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<h3 id=\"data-trigger\"><a href=\"#data-trigger\" aria-hidden><span class=\"icon icon-link\"></span></a>Data Trigger</h3>\n<p><strong>Data</strong> is triggered when the datasource is first attached to the grid (unless <code class=\"language-text\">skipInitialTrigger()</code> is used) and also\nmanually triggered by calling the <code class=\"language-text\">refresh()</code> method on the datasource.</p>\n<p>You can provide an optional value when calling <code class=\"language-text\">refresh()</code>, this object is passed on as a value and you can\naccess it in the event via <code class=\"language-text\">event.data.curr</code>.</p>\n<div pbl-example-view=\"pbl-manual-datasource-trigger-component\" containerClass=\"table-height-300 mat-elevation-z7\"></div>\n<p>In this example each button will trigger a refresh with a passed parameter, the number of items to return.</p>\n<p>Note that we provide a second type parameter to the factory function:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token generic-function\"><span class=\"token function\">createDS</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div></div>\n<p>This will set the type in the <code class=\"language-text\">data</code> property of the event. This type is by default <code class=\"language-text\">T[]</code> so <code class=\"language-text\">createDS&lt;Person&gt;()</code> is actually <code class=\"language-text\">createDS&lt;Person, Person[]&gt;()</code></p>\n<h3 id=\"sort-filter-and-pagination-trigger\"><a href=\"#sort-filter-and-pagination-trigger\" aria-hidden><span class=\"icon icon-link\"></span></a>Sort, Filter and Pagination trigger</h3>\n<p>Let's review the source for each trigger:</p>\n<ul>\n<li>Sort - Calling the <code class=\"language-text\">setSort</code> method on the datasource</li>\n<li>Filter - Calling the <code class=\"language-text\">setFilter</code> method on the datasource</li>\n<li>Pagination - Changes in the paginator event (page, itemsPerPage)</li>\n</ul>\n<p>The default behavior is suited for client side mode where all data is available in a single collection. In this scenario the triggers are handled\ninternally because all the information requires is available to the factory.</p>\n<p>To enable custom triggering we need to tell the factory which one, during the definition.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dsCustomTrigger <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createDS</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">setCustomTriggers</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pagination'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sort'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span><span class=\"token function\">getPeople</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>This is suitable for remote data sources that return paginated responses (which forces sorting and filtering on the server).</p>\n<p>For demonstration we enabled <strong>pagination</strong> and <strong>sorting</strong>, but NOT <strong>filtering</strong>, which will result in a per page filter behavior.</p>\n<div pbl-example-view=\"pbl-enabling-custom-triggers-example-component\" containerClass=\"table-height-300 mat-elevation-z7\"></div>\n<h2 id=\"the-event-source\"><a href=\"#the-event-source\" aria-hidden><span class=\"icon icon-link\"></span></a>The Event Source</h2>\n<p>As explained above there are several sources however, we group them into 2 main groups:</p>\n<ul>\n<li><strong>data</strong> - for all events triggered from the a data trigger</li>\n<li><strong>customTrigger</strong> - for all events triggered from Sort, Filter and / or Pagination trigger</li>\n</ul>\n<p>We pass this value in the <code class=\"language-text\">eventSource</code> property which can accepts any value that is the key of <code class=\"language-text\">PblDataSourceTriggerChangedEventSource</code></p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblDataSourceTriggerChangedEventSource</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * The source of the event was a data request. Either via `refresh()` or the initial data request.\n   */</span>\n  data<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * The source of the event was a change in the filter, sort, pagination or a combination of them.\n   */</span>\n  customTrigger<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>For now, the only 2 groups are <strong>data</strong> &#x26; <strong>customTrigger</strong> however plugins and extensions can extend this list and add more sources.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n For example, the \n<strong>infinite-scroll</strong>\n plugin adds the \n<strong>infiniteScroll</strong>\n event source which indicates that the trigger for the\nevent was from an infinite scroll action which led to the need to get more rows from the server\n</blockquote>\n<h2 id=\"skipping-initial-update\"><a href=\"#skipping-initial-update\" aria-hidden><span class=\"icon icon-link\"></span></a>Skipping initial update</h2>\n<p>By default the datasource will invoke an initial trigger once it is created, this is usually preferred.</p>\n<p>In some scenarios, usually in server side mode, we want to defer this trigger and call it manually at a later point in time.\nFor example, once we get some input parameters from the user or once other calls finish.</p>\n<p>To skip the initial trigger we use <code class=\"language-text\">skipInitialTrigger()</code>:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dataSource <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createDS</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">skipInitialTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>Now, the datasource will not fetch data on load and the grid will remain empty until the <code class=\"language-text\">refresh()</code> method is called on the datasource.</p>\n<h2 id=\"keep-alive\"><a href=\"#keep-alive\" aria-hidden><span class=\"icon icon-link\"></span></a>Keep Alive</h2>\n<p>By default the datasource will be bound to the grid, once the grid component is destroyed the datasource is destroyed.<br>\nThis is usually the preferred behavior as it automatically manage memory cleanup for the datasource.</p>\n<p>We can change the default behavior and keep the datasource around even if the grid is destroyed.<br>\nThis means that we must destroy the datasource manually or we will experience memory leaks.</p>\n<p>This behavior is useful when moving a datasource between grids, e.g. <code class=\"language-text\">*ngIf</code></p>\n<p>To persist the datasource between grid we use <code class=\"language-text\">keepAlive()</code>:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dataSource <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createDS</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">keepAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n"}