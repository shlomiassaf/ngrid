{"id":"extending-ngrid","title":"Extending NGrid","contents":"<h1 id=\"ngrids-extensibility-model\"><a href=\"#ngrids-extensibility-model\" aria-hidden><span class=\"icon icon-link\"></span></a>NGrid's Extensibility Model</h1>\n<p>One of the core architecture goals in NGrid is extensibility.<br>\nExtensions (i.e. plugins) are the powerful engine that allows adding\nfeatures on-demand without overloading the core of the grid in terms of code complexity &#x26; maintenance and in terms pf core performance.</p>\n<p>For this reason, NGrid is pre-packed with dedicated services aimed at helping extensions communicate with the grid and easily integrate\nwith columns, data and other internal features of the grid.</p>\n<p>A plugin will add / extend:</p>\n<ul>\n<li>Logical behavior (e.g. copy/pase, persisting grid state, etc...)</li>\n<li>UI (e.g. Selection cell, detail-row, context menu, etc...)</li>\n<li>Both...</li>\n</ul>\n<h2 id=\"built-in-plugins\"><a href=\"#built-in-plugins\" aria-hidden><span class=\"icon icon-link\"></span></a>Built-In Plugins</h2>\n<p>A lot of the features offered by the core package (<code class=\"language-text\">@pebula/ngrid</code>) are plugins.</p>\n<p>You can easily identify built-in plugins through their import namespace, which is a secondary namespace to <code class=\"language-text\">@pebula/ngrid</code>.</p>\n<p>Some examples:</p>\n<ul>\n<li><code class=\"language-text\">@pebula/ngrid/target-events</code> - Support for input device events</li>\n<li><code class=\"language-text\">@pebula/ngrid/detail-row</code> - Support for master / detail row structure</li>\n<li><code class=\"language-text\">@pebula/ngrid/drag</code> - Support for drag and drop</li>\n<li><code class=\"language-text\">@pebula/ngrid/state</code> - Saving and restoring state from and to the grid</li>\n<li>And more...</li>\n</ul>\n<p>The rule of thumb is to prefer built in plugins over internal implementation when introducing new features.</p>\n<p>For example, the virtual scrolling is heavily bound to the grid's behavior so it is an internal feature but\nsaving and restoring grid state (<code class=\"language-text\">@pebula/ngrid/state</code>) is not.</p>\n<h2 id=\"extensibility-apis\"><a href=\"#extensibility-apis\" aria-hidden><span class=\"icon icon-link\"></span></a>Extensibility APIs</h2>\n<p>There are 3 main APIs that plugins can work with:</p>\n<h3 id=\"grid-plugin-api-pblngridplugincontroller\"><a href=\"#grid-plugin-api-pblngridplugincontroller\" aria-hidden><span class=\"icon icon-link\"></span></a>Grid Plugin API (<code class=\"language-text\">PblNgridPluginController</code>)</h3>\n<p>A plugin manager unit (per grid instance) that:</p>\n<ul>\n<li>Provide access to <code class=\"language-text\">PblNgridExtensionApi</code></li>\n<li>Provide access to grid events</li>\n<li>Provide inter-plugin communication. Accessing instances or other plugins and/or creating instances of other plugins.</li>\n</ul>\n<p>Plugins will usually work with <code class=\"language-text\">PblNgridExtensionApi</code> but might use <code class=\"language-text\">PblNgridPluginController</code> to communicate with other plugins (e.g. when a plugin depends on another plugin).</p>\n<h3 id=\"grid-extension-api-pblngridextensionapi\"><a href=\"#grid-extension-api-pblngridextensionapi\" aria-hidden><span class=\"icon icon-link\"></span></a>Grid Extension API (<code class=\"language-text\">PblNgridExtensionApi</code>)</h3>\n<p>The grid extension API is a set of APIs the control the grid, can invoke actions and update values.</p>\n<p>You can get <code class=\"language-text\">PblNgridExtensionApi</code> through DI using the token <code class=\"language-text\">EXT_API_TOKEN</code> or through <code class=\"language-text\">PblNgridPluginController.extApi</code>.</p>\n<h3 id=\"grid-events\"><a href=\"#grid-events\" aria-hidden><span class=\"icon icon-link\"></span></a>Grid Events</h3>\n<p>The Grid events are a stream of life-cycle events fired by the grid, which plugins can use in order to react and create behaviors.<br>\nThe events can be accessed through: <code class=\"language-text\">PblNgridExtensionApi.events</code> or <code class=\"language-text\">PblNgridPluginController.events</code>.</p>\n<p>Here are some of the events:</p>\n<ul>\n<li><strong>beforeInvalidateHeaders</strong> - Emits before the columns are processed. (Fired at startup and every time the columns are invalidated )</li>\n<li><strong>onInvalidateHeaders</strong> - Emits after the columns are processed. (Fired at startup and every time the columns are invalidated )</li>\n<li><strong>onInit</strong> - Emits once, when the grid's <code class=\"language-text\">ngAfterViewInit</code> is processed but after column invalidation.</li>\n<li><strong>onResizeRow</strong> - Emits after a column resize was detected</li>\n<li><strong>onDataSource</strong> - Emits when the datasource is replaced (not when the data changes by the trigger, only when the datasource itself changes)</li>\n<li><strong>onDestroy</strong>  - Emits once, when the grid's <code class=\"language-text\">ngOnDestroy</code> is processed.</li>\n</ul>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n If you're building a plugin and find that an event is missing, please open an issue with a suggestion and we will try to add the event.\n</blockquote>\n<h4 id=\"grid-created-event\"><a href=\"#grid-created-event\" aria-hidden><span class=\"icon icon-link\"></span></a>Grid Created Event</h4>\n<p>There is a special event that emits every time a new grid instance is created, this event is not part of the event stream because\nthe stream represents the events of a given instance. Think of it as a static event that notify about new grids. To access the stream\nuse <code class=\"language-text\">PblNgridPluginController.created</code>. (demo below)</p>\n<h2 id=\"creating-a-plugin\"><a href=\"#creating-a-plugin\" aria-hidden><span class=\"icon icon-link\"></span></a>Creating a Plugin</h2>\n<p>There 2 ways to create a plugin and bind the plugin instance and a grid instance:</p>\n<ul>\n<li>Angular Directives</li>\n<li>Grid Extension Registry</li>\n</ul>\n<p>The main difference between the 2 is the way the plugin instantiate and bind with the grid instance.<br>\nWith a <strong>directive</strong> the process is driven by the template, when the directive is set on the template, the plugin will bind to the grid and run.\nOtherwise, registration is programmatic, driven by other (dependant) plugins or through grid instantiation events.</p>\n<p>Other then that, both approaches are similar so we will now review each way and after that move to real plugin business.</p>\n<h3 id=\"angular-directives\"><a href=\"#angular-directives\" aria-hidden><span class=\"icon icon-link\"></span></a>Angular Directives</h3>\n<p>By itself, an angular directive is the perfect plugin host, allowing immediate access to the grid instance and any other DI tokens available to it (i.e. <code class=\"language-text\">PblNgridExtensionApi</code> &#x26; <code class=\"language-text\">PblNgridPluginController</code>).</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">PLUGIN_KEY</span><span class=\"token operator\">:</span> <span class=\"token string\">'myCustomPlugin'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'myCustomPlugin'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Directive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> selector<span class=\"token operator\">:</span> <span class=\"token string\">'pbl-ngrid[myCustomPlugin]'</span><span class=\"token punctuation\">,</span> exportAs<span class=\"token operator\">:</span> <span class=\"token string\">'myCustomPlugin'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCustomPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> grid<span class=\"token operator\">:</span> PblNgridComponent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> pluginCtrl<span class=\"token operator\">:</span> PblNgridPluginController<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>To use it:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span> <span class=\"token attr-name\">myCustomPlugin</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>Since it's an angular directive it can also get input, emit output, exportAs and get queried by angular (<code class=\"language-text\">ViewChild</code>).</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The \n<code class=\"language-text\">PLUGIN_KEY</code>\n is a unique identifier used to register the plugin together with \n<code class=\"language-text\">ngridPlugin()</code>\n. This is not mandatory, directive style plugin\ndoes not require registration as it is template driven and created by the angular runtime. However, registration provide better control and inter-plugin communication.\n</blockquote>\n<h3 id=\"grid-extension-registry\"><a href=\"#grid-extension-registry\" aria-hidden><span class=\"icon icon-link\"></span></a>Grid Extension Registry</h3>\n<p>Some plugins are not suitable for the template driven approach, for example we might want to apply them\nfor all of the grids instead of forcing the user to write them every time a grid is used.</p>\n<p>This method provide an alternative path for instantiating plugins and binding them to grids.</p>\n<p>We will use the same example:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">PLUGIN_KEY</span><span class=\"token operator\">:</span> <span class=\"token string\">'myCustomPlugin'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'myCustomPlugin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCustomPlugin</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>There are 2 issues now:</p>\n<ol>\n<li>How can we access the grid instance, <code class=\"language-text\">PblNgridExtensionApi</code>, <code class=\"language-text\">PblNgridPluginController</code> and other injectables?</li>\n<li>How do we instantiate and bind the plugin to a grid instance?</li>\n</ol>\n<p>With a directive it was all simple, everything was managed by angular:</p>\n<ol>\n<li>We got access to the grid and other injectables through angular's DI.</li>\n<li>Angular instantiated the plugin and created the bind to the grid.</li>\n</ol>\n<p>We now need a way to be able to instantiate a plugin and pass it the grid instance and other injectables but it must be\nconsistent and work for all plugins.</p>\n<p>We need to refactor our code:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// id (PLUGIN_KEY) is unique and typed so we must augment it:</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'@pebula/ngrid/lib/ext/types'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblNgridPluginExtension</span> <span class=\"token punctuation\">{</span>\n    clipboard<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblNgridClipboardPlugin<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblNgridPluginExtensionFactories</span> <span class=\"token punctuation\">{</span>\n    clipboard<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> PblNgridClipboardPlugin<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">PLUGIN_KEY</span><span class=\"token operator\">:</span> <span class=\"token string\">'myCustomPlugin'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'myCustomPlugin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCustomPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>grid<span class=\"token operator\">:</span> PblNgridComponent<span class=\"token punctuation\">,</span> injector<span class=\"token operator\">:</span> Injector<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> MyCustomPlugin <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> pluginCtrl <span class=\"token operator\">=</span> PblNgridPluginController<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PblNgridTargetEventsPlugin<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> pluginCtrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> grid<span class=\"token operator\">:</span> PblNgridComponent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> pluginCtrl<span class=\"token operator\">:</span> PblNgridPluginController<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCustomPluginModule</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token constant\">NGRID_PLUGIN</span> <span class=\"token operator\">=</span> <span class=\"token function\">ngridPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token constant\">PLUGIN_KEY</span><span class=\"token punctuation\">,</span> factory<span class=\"token operator\">:</span> <span class=\"token string\">'create'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> MyCustomPlugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Let's explain:</p>\n<p>We added another metadata property to <code class=\"language-text\">ngridPlugin()</code> called <code class=\"language-text\">factory</code>. <code class=\"language-text\">factory</code> is the name of a <strong>static</strong> function on out plugin class\nthat we can use as a factory for creating new instances of the plugin.</p>\n<p>The factory method must accept 2 parameters, the grid and an angular <code class=\"language-text\">Injector</code> and in it can create a new instance and return it.</p>\n<p>Depending on the plugin's need we can get access to all sorts of things.<br>\nWe did not make use of the <code class=\"language-text\">Injector</code> in this case, but you can use it to get everything available in the DI tree.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Note that directive plugins can also use the extension registry, in fact this is the recommended approach so they are visible to other plugins.\n</blockquote>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The plugin key must be unique and typed (via augmentation).\n</blockquote>\n<h2 id=\"example-copy-to-clipboard-plugin\"><a href=\"#example-copy-to-clipboard-plugin\" aria-hidden><span class=\"icon icon-link\"></span></a>Example: <code class=\"language-text\">Copy To Clipboard</code> Plugin</h2>\n<p>Copy to clipboard allows copying the current selected cell/s into the clipboard.</p>\n<p>This is a simple plugin that demonstrates:</p>\n<ul>\n<li>Dual plugin creation (Directive and Registry)</li>\n<li>Interacting with other plugins</li>\n<li>Creating a new grid default settings entry</li>\n<li>Supporting a auto mode which automatically apply the plugin on all grids.</li>\n<li>Working with the <code class=\"language-text\">ContextApi</code></li>\n</ul>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n We will be using the \n<code class=\"language-text\">Clipboard</code>\n service from \n<code class=\"language-text\">@angular/cdk/clipboard</code>\n to handle the copy operation for us.\n</blockquote>\n<h3 id=\"creating-a-unique-key\"><a href=\"#creating-a-unique-key\" aria-hidden><span class=\"icon icon-link\"></span></a>Creating a unique key</h3>\n<p>First, we need a unique id/key/name for our plugin so it can be registered and accessed.<br>\nTo enforce uniqueness, the key is typed and can not be used if not present in the type system.  </p>\n<p>To add a new key to the type system we will use typescript's augmentation feature:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'@pebula/ngrid/lib/ext/types'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblNgridPluginExtension</span> <span class=\"token punctuation\">{</span>\n    clipboard<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblNgridClipboardPlugin<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<h3 id=\"creating-the-plugin-class\"><a href=\"#creating-the-plugin-class\" aria-hidden><span class=\"icon icon-link\"></span></a>Creating the plugin class</h3>\n<p>Because this is a simple example, we will use the same class for the plugin and directive, you can split them in more complex scenarios.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">Directive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> selector<span class=\"token operator\">:</span> <span class=\"token string\">'pbl-ngrid[clipboard]'</span><span class=\"token punctuation\">,</span> exportAs<span class=\"token operator\">:</span> <span class=\"token string\">'pblNgridClipboard'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PblNgridClipboardPlugin</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnDestroy</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>grid<span class=\"token operator\">:</span> PblNgridComponent<span class=\"token punctuation\">,</span> injector<span class=\"token operator\">:</span> Injector<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PblNgridClipboardPlugin <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> pluginCtrl <span class=\"token operator\">=</span> PblNgridPluginController<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PblNgridClipboardPlugin</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> injector<span class=\"token punctuation\">,</span> pluginCtrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> grid<span class=\"token operator\">:</span> PblNgridComponent<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">protected</span> injector<span class=\"token operator\">:</span> Injector<span class=\"token punctuation\">,</span> <span class=\"token keyword\">protected</span> pluginCtrl<span class=\"token operator\">:</span> PblNgridPluginController<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ngOnDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCustomPluginModule</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token constant\">NGRID_PLUGIN</span> <span class=\"token operator\">=</span> <span class=\"token function\">ngridPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token constant\">PLUGIN_KEY</span><span class=\"token punctuation\">,</span> factory<span class=\"token operator\">:</span> <span class=\"token string\">'create'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> PblNgridClipboardPlugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Quite simple, a factory method called <code class=\"language-text\">create</code> that will create new instances for us.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n We register our plugins in a static method inside the module, this is done to allow proper compilation of the library without tree-shaking the\nregistration code. This is probably not mandatory in your application.\n</blockquote>\n<h3 id=\"adding-business\"><a href=\"#adding-business\" aria-hidden><span class=\"icon icon-link\"></span></a>Adding business</h3>\n<p>Our plugin is ready to work but it does nothing, let's spice it up.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> grid<span class=\"token operator\">:</span> PblNgridComponent<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">protected</span> injector<span class=\"token operator\">:</span> Injector<span class=\"token punctuation\">,</span> <span class=\"token keyword\">protected</span> pluginCtrl<span class=\"token operator\">:</span> PblNgridPluginController<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clipboard <span class=\"token operator\">=</span> injector<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>Clipboard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>In the constructor we use the injector to get the <code class=\"language-text\">Clipboard</code> service, which we will use to set value into the clipboard.<br>\nNext, we call the <code class=\"language-text\">init()</code> method:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token function\">ngOnDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    unrx<span class=\"token punctuation\">.</span><span class=\"token function\">kill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_removePlugin <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pluginCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">setPlugin</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PLUGIN_KEY</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pluginCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">ensurePlugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">'targetEvents'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> targetEvents <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pluginCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">getPlugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">'targetEvents'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    targetEvents<span class=\"token punctuation\">.</span>keyDown\n      <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">unrx</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span> event <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkCopy</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>In <code class=\"language-text\">init()</code> we:</p>\n<ul>\n<li>Register the plugin, so it can be accessed from other plugins.</li>\n<li>Checking if the <code class=\"language-text\">target-events</code> plugin is present, if not we create it because we need it to listen to input device events.</li>\n<li>We use the <code class=\"language-text\">target-events</code> plugin instance to listen to key-down events and handle them</li>\n</ul>\n<p>The method <code class=\"language-text\">checkCopy()</code> contains logic for the copy detection, collection the data from the cells and sending it to the clipboard.</p>\n<p>Last thing to remember is to un-register the plugin un destruction:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token function\">ngOnDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    unrx<span class=\"token punctuation\">.</span><span class=\"token function\">kill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_removePlugin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>That's it, the plugin is ready. To be used as directive we need to add a module declaring and exporting it.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NgModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CommonModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/common'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PblNgridModule<span class=\"token punctuation\">,</span> PblNgridConfigService<span class=\"token punctuation\">,</span> PblNgridPluginController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/ngrid'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PblNgridTargetEventsModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/ngrid/target-events'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> CommonModule<span class=\"token punctuation\">,</span> PblNgridModule<span class=\"token punctuation\">,</span> PblNgridTargetEventsModule <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> PblNgridClipboardPlugin <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> PblNgridClipboardPlugin <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PblNgridClipboardPluginModule</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>And, be-hold, a copy functionality:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span> <span class=\"token attr-name\">[dataSource]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ds<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[columns]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>columns<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">clipboard</span> <span class=\"token attr-name\">focusMode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<h3 id=\"auto-enable\"><a href=\"#auto-enable\" aria-hidden><span class=\"icon icon-link\"></span></a>Auto Enable</h3>\n<p>Our clipboard plugin works, but it will only work when we apply it on the template.<br>\nCopy to clipboard is a basic feature, how would we enable it on all grids?</p>\n<p>The answer is using the grid created event, which fires every time a new grid instance is created.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NgModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CommonModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/common'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ON_INIT</span><span class=\"token punctuation\">,</span> PblNgridConfigService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/ngrid/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PblNgridModule<span class=\"token punctuation\">,</span> PblNgridPluginController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/ngrid'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PblNgridTargetEventsModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/ngrid/target-events'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">PLUGIN_KEY</span><span class=\"token punctuation\">,</span> PblNgridClipboardPlugin <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./clipboard.plugin'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> CommonModule<span class=\"token punctuation\">,</span> PblNgridModule<span class=\"token punctuation\">,</span> PblNgridTargetEventsModule <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> PblNgridClipboardPlugin <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> PblNgridClipboardPlugin <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PblNgridClipboardPluginModule</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    PblNgridPluginController<span class=\"token punctuation\">.</span>created\n      <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> pluginCtrl <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">;</span>\n        pluginCtrl<span class=\"token punctuation\">.</span>events\n          <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ON_INIT</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span> e <span class=\"token operator\">=></span> pluginCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">ensurePlugin</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PLUGIN_KEY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>We subscribed to <code class=\"language-text\">PblNgridPluginController.created</code> to get notifications when a new grid is created.<br>\nThe event contains the plugin controller for the grid, with which we start listening to the <code class=\"language-text\">onInit</code> event.<br>\nWhen <code class=\"language-text\">onInit</code> fires, we check if our plugin is registered, if not, we register it.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n We check if the plugin is already registered because it might be, if the user also applied the directive.\n</blockquote>\n<h3 id=\"input-from-user-defined-settings\"><a href=\"#input-from-user-defined-settings\" aria-hidden><span class=\"icon icon-link\"></span></a>Input From User Defined Settings</h3>\n<p>Our auto-enable feature works, but it has some issues:</p>\n<ol>\n<li>It will run every time angular creates an instance, creating multiple handlers</li>\n<li>It is not configurable, the user can't turn it on or off.</li>\n</ol>\n<p>To solve the 1st issue, we will simply apply some guards to make sure we only run once, something like this:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">Optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> @<span class=\"token function\">SkipSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> parentModule<span class=\"token operator\">:</span> PblNgridClipboardPluginModule<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentModule<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// register here</span>\n  <span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>To solve the 2st issue, we will make use if the <a href=\"../features/grid/global-settings\">Global Settings</a>.<br>\nWe will add a new settings group, specific to our plugin, allowing the user to toggle the feature.</p>\n<p>The first step is enrich the global settings type with the new settings:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'@pebula/ngrid/lib/grid/services/config'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblNgridConfig</span> <span class=\"token punctuation\">{</span>\n    clipboard<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/** When set to true will enable the clipboard plugin on all grid instances by default. */</span>\n      autoEnable<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Now, using the injected <code class=\"language-text\">PblNgridConfigService</code> we can determine the toggle state:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PblNgridClipboardPluginModule</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">Optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> @<span class=\"token function\">SkipSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> parentModule<span class=\"token operator\">:</span> PblNgridClipboardPluginModule<span class=\"token punctuation\">,</span>\n              configService<span class=\"token operator\">:</span> PblNgridConfigService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentModule<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    PblNgridPluginController<span class=\"token punctuation\">.</span>created\n      <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> configService<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PLUGIN_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>autoEnable <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// checking the toggle state of the autoEnable feature</span>\n          <span class=\"token keyword\">const</span> pluginCtrl <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">;</span>\n          pluginCtrl<span class=\"token punctuation\">.</span>events\n            <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ON_INIT</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span> e <span class=\"token operator\">=></span> pluginCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">ensurePlugin</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PLUGIN_KEY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>The user will define this in the application root module:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/** Module definition here... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRootModule</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>gridConfig<span class=\"token operator\">:</span> PblNgridConfigService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gridConfig<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clipboard'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      autoEnable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<hr>\n<p>To see the final source code for this plugin, <a href=\"https://github.com/shlomiassaf/ngrid/tree/master/libs/ngrid/clipboard/src/lib\">see the github folder</a></p>\n<hr>\n<div pbl-example-view=\"pbl-copy-selection-example\"></div>\n"}