[{"parent":"InfiniteScrollDataSourceExample","file":"infinite-scroll-data-source.component.ts","title":"Infinite Scroll Data Source","lang":"typescript","source":"import { Observable } from 'rxjs';\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { columnFactory } from '@pebula/ngrid';\nimport { createInfiniteScrollDS } from '@pebula/ngrid/infinite-scroll';\n\nimport { Person, DynamicRestClientApi } from '@pebula/apps/docs-app-lib/client-api';\n\n/**\n * In this example we use a simulated REST API that returns a pagination object with fixed item count and a page number.\n * So all responses are in 100 items blocks.\n *\n * When the user scrolls it will most likely hit a value which does not nicely split into a single 100 items block\n * E.G get items 243 to 342.\n *\n * We need to handle this and make 2 calls when it happen, taking only the relevant items from each response.\n *\n * If your server supports SKIP and LIMIT pagination instructions you don't need the 2 calls.\n */\n@Component({\n  selector: 'pbl-infinite-scroll-data-source-example',\n  templateUrl: './infinite-scroll-data-source.component.html',\n  styleUrls: ['./infinite-scroll-data-source.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InfiniteScrollDataSourceExample {\n\n  columns = columnFactory()\n    .table(\n      { prop: 'id', width: '100px', pIndex: true },\n      { prop: 'name', width: '100px', editable: true },\n      { prop: 'gender', width: '50px' },\n      { prop: 'birthdate', type: 'date', width: '25%' },\n    )\n    .build();\n\n  ds = createInfiniteScrollDS<Person>()\n    .withInfiniteScrollOptions({\n      blockSize: 100,\n      initialVirtualSize: 100,\n    })\n    .withCacheOptions('sequenceBlocks')\n    .onTrigger(event => {\n      if (event.isInitial) {\n        this.ds.setCacheSize(200 * 4);\n        return this.client.getPeople({\n          pagination: { itemsPerPage: 100, page: 1 },\n        })\n        .then( resp => {\n          this.ds.updateVirtualSize(resp.pagination.totalItems);\n          event.updateTotalLength(resp.pagination.totalItems);\n          return resp.items;\n        });\n      } else {\n        // At this point \"event.fromRow\" will never be >= to event.totalLength\n        // We defined the total length in the first trigger, so the datasource will make sure to avoid requests\n        // for data out of range.\n\n        console.log(event.fromRow, event.toRow);\n        const r1 = event.fromRow % 100;\n        const p1 = Math.floor(event.fromRow / 100) + 1;\n\n        const requests = [\n          this.client.getPeople({ pagination: { itemsPerPage: 100, page: p1 } })\n        ];\n        if (r1 > 0) {\n          // We can assume that \"event.toRow\" will never be greater then \"event.totalLength\"\n          // We defined the total length in the first trigger, so the datasource will make sure that toRow will not exceed the total length\n          // If it does, it will be trimmed, and so will the offset.\n          requests.push(this.client.getPeople({ pagination: { itemsPerPage: 100, page: p1 + 1 } }));\n        }\n        return new Observable<Person[]>( s => {\n          console.log(`NEW CALL WITH ${event.fromRow} - ${event.toRow}`)\n          Promise.all(requests)\n            .then( ([resp1, resp2]) => {\n              const resp = resp1.items.slice(r1, 100);\n              if (resp2) {\n                resp.push(...resp2.items.slice(0, r1));\n              }\n              s.next(resp);\n              s.complete();\n            })\n            .catch(e => s.error(e) );\n          return () => console.log(`DONE WITH ${event.fromRow} - ${event.toRow}`)\n        });\n      }\n    })\n    .create();\n\n  constructor(private client: DynamicRestClientApi) { }\n}\n","contents":"<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rxjs'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ChangeDetectionStrategy<span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">,</span> ViewEncapsulation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> columnFactory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/ngrid'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createInfiniteScrollDS <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/ngrid/infinite-scroll'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Person<span class=\"token punctuation\">,</span> DynamicRestClientApi <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/apps/docs-app-lib/client-api'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * In this example we use a simulated REST API that returns a pagination object with fixed item count and a page number.\n * So all responses are in 100 items blocks.\n *\n * When the user scrolls it will most likely hit a value which does not nicely split into a single 100 items block\n * E.G get items 243 to 342.\n *\n * We need to handle this and make 2 calls when it happen, taking only the relevant items from each response.\n *\n * If your server supports SKIP and LIMIT pagination instructions you don't need the 2 calls.\n */</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'pbl-infinite-scroll-data-source-example'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token operator\">:</span> <span class=\"token string\">'./infinite-scroll-data-source.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./infinite-scroll-data-source.component.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  encapsulation<span class=\"token operator\">:</span> ViewEncapsulation<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">,</span>\n  changeDetection<span class=\"token operator\">:</span> ChangeDetectionStrategy<span class=\"token punctuation\">.</span>OnPush<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InfiniteScrollDataSourceExample</span> <span class=\"token punctuation\">{</span>\n\n  columns <span class=\"token operator\">=</span> <span class=\"token function\">columnFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">'100px'</span><span class=\"token punctuation\">,</span> pIndex<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">'100px'</span><span class=\"token punctuation\">,</span> editable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'gender'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">'50px'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'birthdate'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'date'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">'25%'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  ds <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createInfiniteScrollDS</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">withInfiniteScrollOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      blockSize<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n      initialVirtualSize<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">withCacheOptions</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequenceBlocks'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span>event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>isInitial<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span><span class=\"token function\">setCacheSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">getPeople</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          pagination<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> itemsPerPage<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> page<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> resp <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span><span class=\"token function\">updateVirtualSize</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>pagination<span class=\"token punctuation\">.</span>totalItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          event<span class=\"token punctuation\">.</span><span class=\"token function\">updateTotalLength</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>pagination<span class=\"token punctuation\">.</span>totalItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// At this point \"event.fromRow\" will never be >= to event.totalLength</span>\n        <span class=\"token comment\">// We defined the total length in the first trigger, so the datasource will make sure to avoid requests</span>\n        <span class=\"token comment\">// for data out of range.</span>\n\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>fromRow<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>toRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> r1 <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>fromRow <span class=\"token operator\">%</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>fromRow <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> requests <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">getPeople</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pagination<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> itemsPerPage<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> page<span class=\"token operator\">:</span> p1 <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r1 <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// We can assume that \"event.toRow\" will never be greater then \"event.totalLength\"</span>\n          <span class=\"token comment\">// We defined the total length in the first trigger, so the datasource will make sure that toRow will not exceed the total length</span>\n          <span class=\"token comment\">// If it does, it will be trimmed, and so will the offset.</span>\n          requests<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">getPeople</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pagination<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> itemsPerPage<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> page<span class=\"token operator\">:</span> p1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span> s <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">NEW CALL WITH </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>fromRow<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>toRow<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n          <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>requests<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>resp1<span class=\"token punctuation\">,</span> resp2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">const</span> resp <span class=\"token operator\">=</span> resp1<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resp2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                resp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>resp2<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n              s<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              s<span class=\"token punctuation\">.</span><span class=\"token function\">complete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">DONE WITH </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>fromRow<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>toRow<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> client<span class=\"token operator\">:</span> DynamicRestClientApi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"},{"parent":"InfiniteScrollDataSourceExample","file":"./infinite-scroll-data-source.component.html","title":"./infinite-scroll-data-source.component.html","lang":"html","source":"<pbl-ngrid [dataSource]=\"ds\" [columns]=\"columns\">\n  <mat-progress-bar *ngIf=\"ds.adapter.virtualRowsLoading | async\" mode=\"indeterminate\"></mat-progress-bar>\n</pbl-ngrid>\n","contents":"<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span> <span class=\"token attr-name\">[dataSource]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ds<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[columns]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>columns<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mat-progress-bar</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ds.adapter.virtualRowsLoading | async<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indeterminate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mat-progress-bar</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>"}]