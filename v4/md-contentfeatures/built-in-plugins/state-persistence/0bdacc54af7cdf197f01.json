{"id":"features/built-in-plugins/state-persistence","title":"State Persistence","contents":"<h1 id=\"state-persistence\"><a href=\"#state-persistence\" aria-hidden><span class=\"icon icon-link\"></span></a>State Persistence</h1>\n<p>The state persistence plugin allows saving and restoring state from and to the grid.</p>\n<p>The obvious use case is saving and restoring user-modified data such as column width's, visual state and order. However, state is not limited\nto columns only, anything configuration related can be saved and restored.</p>\n<h2 id=\"simple-usage\"><a href=\"#simple-usage\" aria-hidden><span class=\"icon icon-link\"></span></a>Simple Usage</h2>\n<p>The state plugin is customizable so other plugins can use it and for it to be used in different environment.\nThe customization comes with a price, the more power needed the more complex it gets.</p>\n<p>To get up and going easily the plugin comes with a predefined configuration that addresses the obvious use-case, saving and restoring user modified data.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>statePersistenceDemo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">persistState</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>By setting the attribute <code class=\"language-text\">persistState</code> on the grid it will automatically restore sate on initial load and save state when it is destroyed or resized.</p>\n<p>The state is save to and restored from the local storage.</p>\n<p>The state can be pretty big, not all it is saved, just a specific portion of it which is customizable through the options.\nThe <code class=\"language-text\">persistState</code> directive comes with pre-defined options that uses a preset called <code class=\"language-text\">userSessionPref</code> to defined which state to persist.</p>\n<p>The <code class=\"language-text\">userSessionPref</code> preset persists:</p>\n<ul>\n<li><code class=\"language-text\">hideColumns</code>, <code class=\"language-text\">showFooter</code>, and <code class=\"language-text\">showHeader</code> from the grid instance</li>\n<li>The order of the columns</li>\n<li>The width of the column</li>\n</ul>\n<p>Note that the <code class=\"language-text\">id</code> attribute is assigned to the element, this is <strong>mandatory</strong> so the plugin can identify the grid when saving and restoring.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n In this example the \n<code class=\"language-text\">id</code>\n attribute is used for identification, you can provide your own identification adapter and use other methods such as url, hash, etc...\n</blockquote>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n In this example the local storage is used for persistence, you can provide your own persistence adapter and use other type of data stores for saving and restoring state.\n</blockquote>\n<div pbl-example-view=\"pbl-state-persistence-example\"></div>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Ok this was easy, just adding \n<code class=\"language-text\">persistState</code>\n and the users of the table can save and restore the preferences.\n</blockquote>\n<p>Now, change the width of the email column using the slider and / or swap the <code class=\"language-text\">name</code> and <code class=\"language-text\">rating</code> columns using the button.</p>\n<p><strong>Navigate to a different page and back to this one, your changes was magically saved!</strong></p>\n<h3 id=\"persistence-events\"><a href=\"#persistence-events\" aria-hidden><span class=\"icon icon-link\"></span></a>Persistence Events</h3>\n<p>The plugin (and the <code class=\"language-text\">persistState</code> directive) emit life-cycle events from the persistence process:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PblNgridStatePlugin</span> <span class=\"token punctuation\">{</span>\n\n  afterLoadState<span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  afterSaveState<span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  onError<span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> phase<span class=\"token operator\">:</span> <span class=\"token string\">'save'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'load'</span><span class=\"token punctuation\">;</span> error<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>In the example above we used the <code class=\"language-text\">afterLoadState</code> event to register the initial value for the slider.</p>\n<hr>\n<p>And of course, don't forget to the the <code class=\"language-text\">PblNgridStatePluginModule</code> module to your project!</p>\n<div><div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PblNgridStatePluginModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/ngrid/state'</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<h2 id=\"plugin-options\"><a href=\"#plugin-options\" aria-hidden><span class=\"icon icon-link\"></span></a>Plugin Options</h2>\n<p>This plugin provides a global configuration group under the name <code class=\"language-text\">state</code> and local per-instance configuration.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n If you're unfamiliar with global configurations and configuration groups, \n<a href=\"../../../features/grid/global-settings\">read about it here</a>\n</blockquote>\n<h3 id=\"auto-enable\"><a href=\"#auto-enable\" aria-hidden><span class=\"icon icon-link\"></span></a>Auto Enable</h3>\n<p>Automatically enabling the <code class=\"language-text\">state</code> plugin for all grids is configured <strong>only</strong> through the configuration service.\nIn addition, you can define the load/save configuration to use when auto-enabling the plugin.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblNgridConfig</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/** When set to true will enable the state plugin on all table instances by default. */</span>\n    autoEnable<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * Options to use when auto-loading the plugin\n     */</span>\n    autoEnableOptions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      loadOptions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblNgridStateLoadOptions<span class=\"token punctuation\">;</span>\n      saveOptions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblNgridStateSaveOptions<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<h2 id=\"advanced-usage\"><a href=\"#advanced-usage\" aria-hidden><span class=\"icon icon-link\"></span></a>Advanced Usage</h2>\n<p>The simple usage scenario is usually enough but there are use-cases where fine-tuning is required or even an\nentirely different agenda is at play.</p>\n<p>For example, we might want to fine-tune specific keys in the simple usage scenario, removing keys\nthat we don't want to allow the user to persist, e.g. the width of a column, it's order, etc...</p>\n<p>We might want to save entire state so we can load it manually, we can go wild and merge multiple states\ntogether based on group of grids, no limit here.</p>\n<p>There are 2 ways to control the way state is saved and restored:</p>\n<ol>\n<li>Provided different options</li>\n<li>Extending the state (teaching the state how to save/restore new data)</li>\n</ol>\n<h3 id=\"the-core\"><a href=\"#the-core\" aria-hidden><span class=\"icon icon-link\"></span></a>The Core</h3>\n<p>Before we dive in, let's overview the core constructs of the plugin.</p>\n<p>The state plugin has 3 main functions:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">hasState</span><span class=\"token punctuation\">(</span>grid<span class=\"token operator\">:</span> PblNgridComponent<span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblNgridStateOptions<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">saveState</span><span class=\"token punctuation\">(</span>grid<span class=\"token operator\">:</span> PblNgridComponent<span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblNgridStateSaveOptions<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loadState</span><span class=\"token punctuation\">(</span>grid<span class=\"token operator\">:</span> PblNgridComponent<span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblNgridStateLoadOptions<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>PblNgridGlobalState<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>Which we can import:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hasState<span class=\"token punctuation\">,</span> saveState<span class=\"token punctuation\">,</span> loadState  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/ngrid/state'</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>With these 3 we can check if a grid <code class=\"language-text\">hasState</code>, if so <code class=\"language-text\">loadState</code> and later <code class=\"language-text\">saveState</code>.</p>\n<p>All we need is an instance of the grid.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n The options are optional, if not provided or partially provided the plugin will use internal default values.\n</blockquote>\n<p>The plugin (and the <code class=\"language-text\">persistState</code> directive) use these functions with some of the grid events to create a unit\nof control for state persistence but you can also do it with these 3 functions.</p>\n<p>Beside <code class=\"language-text\">hasState</code>, <code class=\"language-text\">saveState</code> and <code class=\"language-text\">loadState</code> the core provides the mechanism to save and restore state by splitting\nit (the state) to chunks, starting with 0 chunks but allowing to register chunk handlers that can save and restore it.</p>\n<p>The plugin comes with built in chunk handlers that are already registered.</p>\n<h3 id=\"the-options\"><a href=\"#the-options\" aria-hidden><span class=\"icon icon-link\"></span></a>The Options</h3>\n<p>The options control the behavior of the plugin, how to save and restore state, how to identify a grid and what parts of the state to persist from the state\navailable through state chunk handlers (i.e. you can't add new handlers through the options).</p>\n<p>There are 2 type of options, one for saving and one for loading:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">PblNgridStateOptions</span> <span class=\"token operator\">=</span> PblNgridStateLoadOptions <span class=\"token operator\">|</span> PblNgridStateSaveOptions</code></pre></div></div>\n<p>The options for saving (<code class=\"language-text\">PblNgridStateSaveOptions</code>) is a subset of loading (<code class=\"language-text\">PblNgridStateLoadOptions</code>):</p>\n<div><div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblNgridStateSaveOptions</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * The adapter to use for persistance.\n   * @default PblNgridLocalStoragePersistAdapter\n   */</span>\n  persistenceAdapter<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblNgridPersistAdapter\n\n  <span class=\"token comment\">/**\n   * The resolver used to get the unique id for an instance of the grid.\n   * If not set default's to the id property of `PblNgridComponent` which is the id attribute of `&lt;pbl-ngrid>`\n   * @default PblNgridIdAttributeIdentResolver\n   */</span>\n  identResolver<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblNgridIdentResolver<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * Instruction of chunk and chunk keys to include when serializing / deserializing.\n   * Include is strict, only the included chunks and keys are used, everything else is ignored.\n   *\n   * If `include` and `exclude` are set, `include` wins.\n   *\n   * Note that when using include with child chunks you must include the root chunk of the child chunk, if not\n   * the root chunk is skipped and so the child.\n   *\n   * For example, to include the `width` key of the `dataColumn` child chunk we must also include the `columns` root chunk.\n   *\n   * ```ts\n   *   const obj: StateChunkKeyFilter = {\n   *     columns: true,\n   *     dataColumn: [\n   *       'width',\n   *     ]\n   *   };\n   * ```\n   *\n   * We can also use the wildcard `true` to include all items in a chunk:\n   *\n   * ```ts\n   *   const obj: StateChunkKeyFilter = {\n   *     columns: true,\n   *     dataColumn: true,\n   *   };\n   * ```\n   *\n   * Same specificity rule apply here as well, `columns: true` alone will not include all of it's child chunks so we must add `dataColumn: true`.\n   * Vice versa, `dataColumn: true` alone will not get included because it's parent (`columns`) is blocked\n   */</span>\n  include<span class=\"token operator\">?</span><span class=\"token operator\">:</span> StateChunkKeyFilter<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * Instruction of chunk and chunk keys to exclude when serializing / deserializing.\n   * Exclude is not strict, all known chunks and keys are used unless they are excluded and so will be ignored\n   *\n   * If `include` and `exclude` are set, `include` wins.\n   *\n   */</span>\n  exclude<span class=\"token operator\">?</span><span class=\"token operator\">:</span> StateChunkKeyFilter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Straight forward:</p>\n<ul>\n<li>\n<p><strong>persistenceAdapter</strong><br>\nThe persistence adapter to use for saving / restoring state. e.g: remote server, indexDb, localStorage, etc...\nThe plugin comes with a default adapter that uses the local storage.</p>\n</li>\n<li>\n<p><strong>identResolver</strong><br>\nThe adapter for uniquely identifying a grid. e.g.: An id property on the grid, url combination, hash, etc...\nThe plugin comes with a default adapter that identifies a grid based on it's id property (the id attribute in the DOM)</p>\n</li>\n<li>\n<p><strong>include / exclude</strong><br>\nA map that filters out specific chunks and / or chunk keys.<br>\nWhen <strong>include</strong> is set, only the values filtered out by the map are used.<br>\nWhen <strong>exclude</strong> is set, all values are used except values filtered out by the map.<br>\nIf both <strong>include</strong> and <strong>exclude</strong> are used, <strong>include</strong> winds and exclude is ignored.</p>\n</li>\n</ul>\n<h4 id=\"map-filtering-in-depth\"><a href=\"#map-filtering-in-depth\" aria-hidden><span class=\"icon icon-link\"></span></a>Map filtering in depth</h4>\n<p>Filtering with <strong>include / exclude</strong> is very powerful but requires understand the <strong>state chunks</strong> system.</p>\n<p>Let's start with a filter:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">  <span class=\"token keyword\">const</span> filter<span class=\"token operator\">:</span> StateChunkKeyFilter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    grid<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'hideColumns'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'showFooter'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'showHeader'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    columnOrder<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    columns<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'table'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    dataColumn<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>First, the output of the filter depends wether it is set in the <code class=\"language-text\">include</code> or <code class=\"language-text\">exclude</code> property of the options.</p>\n<p>The filter is a map with the keys representing chunks (by their name) and the values represent what to include from the chunk.\nThe allowed values are boolean true/false or and array of string which are also keys, state keys.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Notice that some property can accept an array of keys, some can only accept boolean and some can accept both.\n</blockquote>\n<p>Starting with the <strong>grid</strong> chunk / property, we only specify 3 keys, the grid chunk itself has more keys on it's chunks:</p>\n<p><code class=\"language-text\">&#39;showHeader&#39;, &#39;showFooter&#39;, &#39;focusMode&#39;, &#39;usePagination&#39;, &#39;hideColumns&#39;, &#39;minDataViewHeight&#39;</code></p>\n<p>So if we set the filter in <strong>include</strong> the 3 keys are the only state we save for the grid chunk.<br>\nIf we set the filter to <strong>exclude</strong> we use all other keys <strong>except</strong> the 3.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The grid chunk represents state of primitive properties on the grid instance\n</blockquote>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The grid chunk can also be set to true which will include / exclude all keys\n</blockquote>\n<p>Now, the <strong>columnOrder</strong> chunk / property, here we set it to <code class=\"language-text\">true</code> which means all keys in the chunk, but not quite...\nIn fact, <strong>columnOrder</strong> can only be set to true/false because it has no keys, it's an array of column id's representing the order...</p>\n<p>The remaining 2, <strong>columns</strong> and <strong>dataColumn</strong> and related.  </p>\n<p>Up until this point we only worked on root chunks (grid and columnOrder), now we will also work with child chunk.</p>\n<p>A <strong>RootStateChunk</strong> can have a single level of child chunks which he can run internally, in this example <strong>columns</strong> is the root and it has a child <strong>dataColumn</strong>.</p>\n<p>The <strong>columns</strong> chunk represents the entire column definition set which means it has child chunks based on the column type handled.</p>\n<p>We will not got into depth here, enough to say that in <strong>include</strong> mode we only save data columns and only their widths, all meta columns are ignored.</p>\n<hr>\n<p>Did you notice that our filter is actually the <code class=\"language-text\">userSessionPref</code> preset? if set in the <strong>include</strong> property it will\nonly include a limited subset of the state, required for user preference persistence.</p>\n<hr>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n If you are worried about guessing chunk names and keys don't be, the entire \n<code class=\"language-text\">StateChunkKeyFilter</code>\n is fully typed.\n</blockquote>\n<h2 id=\"more-to-come\"><a href=\"#more-to-come\" aria-hidden><span class=\"icon icon-link\"></span></a>More to come</h2>\n<p>The state plugin API is solid but requires some work around advance usage agronomics.</p>\n<p>The following is a partial list of what's to come:</p>\n<ul>\n<li>Adding more preset</li>\n<li>Simple API to merge presets and fine-tune options on the fly</li>\n<li>More events (before load/save)</li>\n<li>Easy integration with the <code class=\"language-text\">persistState</code> directive</li>\n</ul>\n<h2 id=\"extending-the-state\"><a href=\"#extending-the-state\" aria-hidden><span class=\"icon icon-link\"></span></a>Extending the state</h2>\n<p>Extending the state is usually for plugin authors.</p>\n<p>The entire plugin is based on built in extensions, visit the source code for the plugin, within the <code class=\"language-text\">core/built-in-handlers</code> for examples.</p>\n"}