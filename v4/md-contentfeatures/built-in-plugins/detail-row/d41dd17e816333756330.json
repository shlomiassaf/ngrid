{"id":"features/built-in-plugins/detail-row","title":"Detail Row","contents":"<h1 id=\"detail-row\"><a href=\"#detail-row\" aria-hidden><span class=\"icon icon-link\"></span></a>Detail Row</h1>\n<hr>\n<p>The detail row plugin depends on the <strong><a href=\"../target-events\">target-events</a></strong> plugin.<br>\nIf the <strong><a href=\"../target-events\">target-events</a></strong> plugin is not initialized the detail row plugin will initialize it.</p>\n<hr>\n<p>The detail row plugin enable the toggling of an additional row, right next to (after) a parent row.</p>\n<p>The detail row will get access to the parent row's context but it can display anything.</p>\n<h2 id=\"toggle-event\"><a href=\"#toggle-event\" aria-hidden><span class=\"icon icon-link\"></span></a>Toggle Event</h2>\n<p>A detail row can be toggled on/off (opened/close) programmatically or through mouse/keyboard events (using the <code class=\"language-text\">targetEvents</code> plugin).</p>\n<p>When a row is toggled on/off the <code class=\"language-text\">toggleChange</code> event is fired, which provided an event handler with access to the row, toggle state and a switch <code class=\"language-text\">toggle()</code> method.</p>\n<div pbl-example-view=\"pbl-detail-row-example\"></div>\n<h2 id=\"custom-parent\"><a href=\"#custom-parent\" aria-hidden><span class=\"icon icon-link\"></span></a>Custom parent</h2>\n<div pbl-example-view=\"pbl-custom-parent-example\"></div>\n<h2 id=\"exportas\"><a href=\"#exportas\" aria-hidden><span class=\"icon icon-link\"></span></a>exportAs</h2>\n<p>The detail row plugin instance is exported as <code class=\"language-text\">pblNgridDetailRow</code>.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span> <span class=\"token attr-name\">detailRow</span> <span class=\"token attr-name\">#detailRowInstance</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pblNgridDetailRow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<h2 id=\"options\"><a href=\"#options\" aria-hidden><span class=\"icon icon-link\"></span></a>Options</h2>\n<p>You can customize the behavior of the detail row:</p>\n<h3 id=\"single--multi-detail-row-mode\"><a href=\"#single--multi-detail-row-mode\" aria-hidden><span class=\"icon icon-link\"></span></a>Single / Multi detail row mode</h3>\n<p>By default, you can open multiple detail rows, however, you can force a single detail row behavior that will\nclose any open row before opening the next one using the input <code class=\"language-text\">singleDetailRow</code>.</p>\n<h3 id=\"excluding-toggle-from-cells\"><a href=\"#excluding-toggle-from-cells\" aria-hidden><span class=\"icon icon-link\"></span></a>Excluding toggle from cells</h3>\n<p>By default, a click anywhere on the row will trigger a detail row toggle, however, this might raise issues\nwhen a cell/s on the row have button. You can exclude specific cell using the input <code class=\"language-text\">excludeToggleFrom</code></p>\n<div pbl-example-view=\"pbl-single-and-exclude-mode-example\"></div>\n<h3 id=\"filtering-detail-rows\"><a href=\"#filtering-detail-rows\" aria-hidden><span class=\"icon icon-link\"></span></a>Filtering detail rows</h3>\n<p>By default, all rows are enabled and can be clicked to view their detail row. Setting <code class=\"language-text\">detailRow</code> to false will disable all detail rows.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span> <span class=\"token attr-name\">detailRow</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span>\n\n// OR\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span> <span class=\"token attr-name\">[detailRow]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>However, you can provide a predicate function to determine which rows can be enable and which can not, dynamically on a \"per row\" basis.</p>\n<div pbl-example-view=\"pbl-predicate-example\"></div>\n<h3 id=\"row-updates\"><a href=\"#row-updates\" aria-hidden><span class=\"icon icon-link\"></span></a>Row updates</h3>\n<p>The <code class=\"language-text\">toggleChange</code> event fires when ever the row is toggled on/off rendering the detail row.</p>\n<p>However, there is another scenario when the detail row requires an update/re-render, when the row is replaced.\nFor example, when using pagination and the user navigates to the next/previous set or when the rows per page size is changed.\nIt might also occur when the data is updated due to custom refresh calls on the datasource or any other scenario that might invoke a datasource update.</p>\n<p>The default behavior is such case is to re-render the detail row with the data of the new row but you can control this behavior using the input <code class=\"language-text\">whenContextChange</code> with 3 options:</p>\n<ul>\n<li><strong>context</strong>: use the context to determine if to open or close the detail row</li>\n<li><strong>ignore</strong>: don't do anything, leave as is (for manual intervention)</li>\n<li><strong>close</strong>: close the detail row</li>\n<li><strong>render</strong>: re-render the row with the new context (default)</li>\n</ul>\n<p>Usually, what you will want is <strong>context</strong> (the default) which will remember the last state of the row and open it based on it.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Note that for \"context\" to work you need to use a datasource in client side mode and it must have a primary/identity column (pIndex) or it will not be able to identify the rows.\n</blockquote>\n<div pbl-example-view=\"pbl-multi-page-example\"></div>\n<h3 id=\"custom-row-updates\"><a href=\"#custom-row-updates\" aria-hidden><span class=\"icon icon-link\"></span></a>Custom row updates</h3>\n<p>The 3 behaviors on row update might be enough but there are scenarios when it's not. For example, when the detail row displays data fetched from the server\nspecifically for a row, i.e. when a detail row is opened the row is used to fetch data from the server and display it.</p>\n<p>In such scenario, the <code class=\"language-text\">render</code> behavior will not help, we need to use the <code class=\"language-text\">ignore</code> behavior along with the <code class=\"language-text\">toggledRowContextChange</code> event.</p>\n<p>The <code class=\"language-text\">toggledRowContextChange</code> emits whenever the row context has changed while the row is toggled open.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<code class=\"language-text\">toggledRowContextChange</code>\n emits the save event handler emitted by \n<code class=\"language-text\">toggleChange</code>\n</blockquote>\n<h2 id=\"detail-rows-with-virtual-scroll\"><a href=\"#detail-rows-with-virtual-scroll\" aria-hidden><span class=\"icon icon-link\"></span></a>Detail Rows with Virtual Scroll</h2>\n<p>From the grid's perspective, dynamic rows open and close randomly, changing the total height of the grid's vertical scroll area.</p>\n<p>When a row is opened, height is added when closed height is reduced. This requires special attention when used with virtual scroll.</p>\n<p>This is why detail rows only works with dynamic virtual scroll (<code class=\"language-text\">vScrollDynamic</code>).</p>\n<div pbl-example-view=\"pbl-detail-row-virtual-scroll-example\"></div>\n<h3 id=\"detail-row-with-virtual-scroll-and-animations\"><a href=\"#detail-row-with-virtual-scroll-and-animations\" aria-hidden><span class=\"icon icon-link\"></span></a>Detail Row with Virtual Scroll and Animations</h3>\n<p>Usually, we would like to have a nice slide up/down animation whenever the detail row is toggled.<br>\nThis is supported using the familiar angular animations or CSS animation.</p>\n<p>The only extra thing required is to:</p>\n<ol>\n<li>Notify the gird that you use animation in this detail row</li>\n<li>Notify the grid when the animation ends</li>\n<li>Disable animation when the toggle originated from a rendering operation</li>\n</ol>\n<p>Let's review using a simple detail row template definition...</p>\n<p>The component holding the template below will have the following animation annotation in it's component metadata:  </p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">animations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'detailExpand'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token string\">'void'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>height<span class=\"token operator\">:</span> <span class=\"token string\">'0px'</span><span class=\"token punctuation\">,</span> minHeight<span class=\"token operator\">:</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> visibility<span class=\"token operator\">:</span> <span class=\"token string\">'hidden'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>height<span class=\"token operator\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> visibility<span class=\"token operator\">:</span> <span class=\"token string\">'visible'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">transition</span><span class=\"token punctuation\">(</span><span class=\"token string\">'void &lt;=> *'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'225ms cubic-bezier(0.4, 0.0, 0.2, 1)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div></div>\n<p>And not the template:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridDetailRowDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let row; animation as animation; hasAnimation: <span class=\"token punctuation\">'</span>interaction<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pbl-detail-row<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">[@.disabled]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>animation.fromRender<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(@detailExpand.done)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>animation.end()<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[@detailExpand]</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>I Am A Detail Row<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>It's a simple slide UP/DOWN animation.</p>\n<p>Let's break the template into pieces:</p>\n<ul>\n<li>We use <code class=\"language-text\">*pblNgridDetailRowDef</code> to declare that this is a detail row template</li>\n<li>We use the expression <code class=\"language-text\">let row; animation as animation; hasAnimation: &#39;interaction&#39;</code> which means:<ul>\n<li>Set <code class=\"language-text\">row</code> as the variable holding the row's data (On the context's <code class=\"language-text\">$implicit</code> property)</li>\n<li>Set <code class=\"language-text\">animation</code> as the variable holding the animation object provided by the context</li>\n<li>Define the <code class=\"language-text\">hasAnimation</code> input on the directive to be <code class=\"language-text\">interaction</code></li>\n</ul></li>\n<li><code class=\"language-text\">[@.disabled]=&quot;animation.fromRender&quot;</code> - Disable animation when the toggle originated from a rendering operation and not a user interaction (click, programmatic)</li>\n<li><code class=\"language-text\">(@detailExpand.done)=&quot;animation.end()&quot;</code> - When the animation is done, notify the grid.</li>\n</ul>\n<blockquote>\n<p>If you're not familiar with structural directive, we recommend ramping up on that.</p>\n</blockquote>\n<p>In short, what we do here is defining a detail row template which we declare as having animations.<br>\nWe <strong>disable</strong> it whenever it is toggled due to a rendering operation which is a page change, row context switch etc...<br>\nThis is important because we don't want to animate in such scenarios.\nAnd of course, we notify when an animation has ended so the grid will be able to run the proper logic.</p>\n<p>If you're using CSS animation it will look something like this:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridDetailRowDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let row; animation as animation; hasAnimation: <span class=\"token punctuation\">'</span>interaction<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pbl-detail-row<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[class.detail-row-disable-animation]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>animation.fromRender<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">(animationend)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>animation.end()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>I Am A Detail Row<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<h4 id=\"hasanimation\"><a href=\"#hasanimation\" aria-hidden><span class=\"icon icon-link\"></span></a>hasAnimation</h4>\n<p>We set <code class=\"language-text\">hasAnimation</code> to <code class=\"language-text\">interaction</code> which indicates that there are multiple values we can provide.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">interaction</code>: If the toggle origin is from a user interaction (e.g. click) or a programmatic API then it <strong>WILL NOT</strong>\nmeasure the height until <code class=\"language-text\">animation.end()</code> is called on the detail row context.\nOtherwise, it will measure it immediately.<br>\nA Non-Interaction origin can happen from scrolling out of view or changing the row's context due to virtual scroll updates.<br>\nI.E: When <code class=\"language-text\">fromRender</code> is true, the grid will measure the height immediately, otherwise it will wait for you to call <code class=\"language-text\">animation.end()</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">always</code>: Will always assume animation is running when toggling the detail row and WILL NOT measure the height\nuntil <code class=\"language-text\">animation.end()</code> is called on the detail row context.</p>\n</li>\n</ul>\n<p>If you are using animation, we strongly suggest to use <code class=\"language-text\">interaction</code> mode!</p>\n<p>If you're not using the dynamic virtual scroll, your detail row does not have animation or your animation is not changing the height, you can just ignore\neverything by not setting <code class=\"language-text\">hasAnimation</code> and not using the <code class=\"language-text\">animation</code> object from the context</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridDetailRowDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let row<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pbl-detail-row<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>I Am A Detail Row<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n"}