{"id":"features/grid/row-class","title":"Row Class","contents":"<h1 id=\"row-class\"><a href=\"#row-class\" aria-hidden><span class=\"icon icon-link\"></span></a>Row Class</h1>\n<p>n<strong>Grid</strong> allows full control and customization for grid <strong>cells</strong> but there are scenarios you will want to customize the row containing the cells.</p>\n<p>The data rows in n<strong>Grid</strong> are generated internally by the grid but you can customize the CSS on per-row basis.<br>\nFor that, you need to provide a function that accepts the row's context (<code class=\"language-text\">PblNgridContext&lt;T&gt;</code>) and returns any valid value\nthat <code class=\"language-text\">[NgClass]</code> accepts.</p>\n<p>The function is provided to the grid as an input, below is the signature with all related inputs:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PblNgridComponent<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> rowClassUpdate<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> PblNgridRowContext<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> Set<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>klass<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> rowClassUpdateFreq<span class=\"token operator\">:</span> <span class=\"token string\">'item'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'ngDoCheck'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n All data row elements already contain the css class \n<code class=\"language-text\">pbl-ngrid-row</code>\n</blockquote>\n<div pbl-example-view=\"pbl-row-class-example\"></div>\n<p>In the example above, all rows with value of the <code class=\"language-text\">name</code> property that has a length greater then 14, will get a red background.</p>\n<h2 id=\"update-frequency-rowclassupdatefreq\"><a href=\"#update-frequency-rowclassupdatefreq\" aria-hidden><span class=\"icon icon-link\"></span></a>Update Frequency (<code class=\"language-text\">rowClassUpdateFreq</code>)</h2>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The following section is for advanced use cases which should be rare.\n</blockquote>\n<p>To minimize possible impact on performance the update frequency of the row's class is controlled and can be one of the following:</p>\n<ul>\n<li><strong>item</strong> - Update only when the data-item for the row changes (<em>this if the default behavior</em>)</li>\n<li><strong>ngDoCheck</strong> - Update on every change detection check that angular initiate's</li>\n<li><strong>none</strong> - Don't update the row's class</li>\n</ul>\n<p>The default behavior is <strong>item</strong> which means that the class list will update only when the data item changes.\nThis behavior fits well when the row's change but the data in them does not, which is 95% of the scenarios.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n If you opt-in to \n<code class=\"language-text\">ngDoCheck</code>\n, make sure your update functions are light and does not perform complex computations.\n</blockquote>\n<p>You might have noticed the <code class=\"language-text\">none</code> frequency which <strong>freezes</strong> class updates of the row.<br>\nIt can be used in scenarios where the next update is known so you can freeze all updates until that point.</p>\n<p>For example, let's assume we have an updater function that just returned the class <code class=\"language-text\">xyz</code> to a row (frequency is <code class=\"language-text\">item</code>).\nThe row element will now contain the class <code class=\"language-text\">xyz</code>.</p>\n<p>If, at this point, we change <code class=\"language-text\">rowClassUpdateFreq</code> to <code class=\"language-text\">none</code> it will leave the <code class=\"language-text\">xyz</code> class in-place till the end of times.</p>\n<p>Now, changing frequency back to <code class=\"language-text\">item</code>... If we want to clear the class from the row element class list:</p>\n<ul>\n<li>We can set <code class=\"language-text\">rowClassUpdate</code> to <code class=\"language-text\">undefined</code></li>\n<li>We can set <code class=\"language-text\">rowClassUpdate</code> to a noop updater function that always return an empty string</li>\n</ul>\n<p>Both will work, with the 1st option disabling the feature entirely and the 2nd option just updating to the current state.</p>\n<p>However, the 2nd option will also keep running in the change cycle, always returning an empty string... so now we can\nfreeze it by setting the frequency to <code class=\"language-text\">none</code>.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Setting \n<code class=\"language-text\">rowClassUpdate</code>\n to \n<code class=\"language-text\">undefined</code>\n will cause internal cleanup which has cost's when setup again. \n<strong>Try to avoid toggling</strong>\n\nthe row class list by setting \n<code class=\"language-text\">rowClassUpdate</code>\n to \n<code class=\"language-text\">undefined</code>\n and back again. Instead apply toggle with a noop updater along with the \n<code class=\"language-text\">none</code>\n frequency.\n</blockquote>\n"}