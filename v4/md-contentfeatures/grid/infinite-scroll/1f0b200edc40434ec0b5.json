{"id":"features/grid/infinite-scroll","title":"Infinite Scroll","contents":"<h1 id=\"infinite-scroll\"><a href=\"#infinite-scroll\" aria-hidden><span class=\"icon icon-link\"></span></a>Infinite Scroll</h1>\n<p>Infinite scrolling provides the feeling of an infinite grid where the user scroll and scrolls until no more data is available but the\ndata is loaded in incremental steps, every time the grid is scrolling to the end a new dataset is fetched from the server.</p>\n<p>We've covered the 2 datasource modes and how we can use them, let's recap:</p>\n<ol>\n<li>\n<p><strong>Client Mode</strong>\nThe entire dataset is provided once. Sorting, pagination and filtering are done on the client without calling an external source.</p>\n</li>\n<li>\n<p><strong>Server Mode</strong>\nThe dataset is provided from the server in chunks. Sorting, pagination and filtering are done on the server.</p>\n</li>\n</ol>\n<p><strong>Infinite scrolling</strong> is not a mode per-se as it can work with both modes above but it is actually used when working with the server.  </p>\n<p><strong>Infinite scrolling</strong> is an alternative to <strong>pagination</strong>, instead of the user having to click on a button/link to navigate between the next/pervious chunk of the dataset\nwith <strong>Infinite scrolling</strong> the next/pervious chunk is loaded automatically based on the user's scroll position.</p>\n<h2 id=\"infinite-scrolling-vs-virtual-scrolling\"><a href=\"#infinite-scrolling-vs-virtual-scrolling\" aria-hidden><span class=\"icon icon-link\"></span></a>Infinite scrolling VS Virtual scrolling</h2>\n<p>Infinite scrolling &#x26; Virtual scrolling are often mis-understood:</p>\n<ul>\n<li><strong>Virtual scroll</strong> enable the display of large datasets in the grid</li>\n<li><strong>Infinite scroll</strong> enable seamless lazy loading of additional data rows into the grid  </li>\n</ul>\n<p>Usually you will use both together, especially when using infinite scroll to add rows (as opposed to replacing rows)</p>\n<h2 id=\"creating-infinite-scroll\"><a href=\"#creating-infinite-scroll\" aria-hidden><span class=\"icon icon-link\"></span></a>Creating Infinite Scroll</h2>\n<p>For a simple experience it is relatively simple to create an infinite scrolling experience using the common grid API:</p>\n<div pbl-example-view=\"pbl-infinite-scroll-example\"></div>\n<p>This should give you an idea what's going on and what is the logic.<br>\nThe basic idea does not change and from here it's just adding fancy stuff like caching, min/max, data normalization etc...\nand creating a consistent developer experience when working with infinite scrolling.</p>\n<h2 id=\"infinite-scroll-data-source\"><a href=\"#infinite-scroll-data-source\" aria-hidden><span class=\"icon icon-link\"></span></a>Infinite Scroll Data Source</h2>\n<p><strong>nGrid</strong> comes with a built-in infinite scroll datasource that simplifies the logic and makes it simple\nto define, mange and update infinite scroll grids.</p>\n<p>To create an infinite scroll datasource we use <code class=\"language-text\">createInfiniteScrollDS()</code>.</p>\n<p><code class=\"language-text\">createInfiniteScrollDS</code> is similar to <code class=\"language-text\">createDS</code> with the exception of the trigger handler which is more rich\nwith data required to manage the lifecycle of an infinite scroll grid.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token generic-function\"><span class=\"token function\">createInfiniteScrollDS</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span>event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>isInitial<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// first call to populate, not due to scrolling...</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// call's coming from user scrolling, more data rows needed</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<div pbl-example-view=\"pbl-infinite-scroll-data-source-example\"></div>\n<div pbl-example-view=\"pbl-index-based-paging-example\"></div>\n<h3 id=\"handling-ontrigger-events\"><a href=\"#handling-ontrigger-events\" aria-hidden><span class=\"icon icon-link\"></span></a>Handling <code class=\"language-text\">onTrigger</code> Events</h3>\n<p>The event handler has the following additional properties:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblInfiniteScrollTriggerChangedEvent<span class=\"token operator\">&lt;</span>TData <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PblDataSourceTriggerChangedEvent<span class=\"token operator\">&lt;</span>TData<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * The total length currently defined\n   */</span>\n  totalLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * When true, indicates that the fetching is done for the last block / page in the datasource.\n   * It means that the this trigger event will fetch the items located at the end of the data source.\n   *\n   * This situation depends on the block size and `PblInfiniteScrollDsOptions.minBlockSize` definition and\n   * the fact that a datasource size is defined either through `PblInfiniteScrollDsOptions.initialDataSourceSize` or\n   * dynamically through `PblDataSourceTriggerChangedEvent.updateTotalLength()`.\n   *\n   * You can use this flag to detect this scenario and extend / enlarge the datasource total size if needed.\n   *\n   * > Note that, on top of all of the above, this will only fire when `direction` is 1.\n   */</span>\n  isLastBlock<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/** The starting row index of the items to fetch */</span>\n  fromRow<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** The ending row index of the items to fetch */</span>\n  toRow<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** The total amount of new items to fetch */</span>\n  offset<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * The direction of scrolling.\n   * Where 1 means scrolling down and -1 means scrolling up.\n   */</span>\n  direction<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>In addition, there is an optional infinite scroll options object you can define which controls the behavior of the infinite scroll.</p>\n<h2 id=\"event-source\"><a href=\"#event-source\" aria-hidden><span class=\"icon icon-link\"></span></a>Event Source</h2>\n<p>As with all triggers, the <code class=\"language-text\">eventSource</code> property indicates the source of the trigger.\nIn an infinite scroll datasource the first trigger will always be <code class=\"language-text\">data</code>.</p>\n<p>The infinite scroll datasource adds a new event source type called <strong>infiniteScroll</strong>.\nIt will fire when the grid reach an area with empty rows and it needs to get the rows from the server.\nIt will then trigger an event with the <code class=\"language-text\">eventSource</code> being <code class=\"language-text\">infiniteScroll</code>.</p>\n<h2 id=\"custom-triggers\"><a href=\"#custom-triggers\" aria-hidden><span class=\"icon icon-link\"></span></a>Custom Triggers</h2>\n<p>The classic custom triggers filter, sort and pagination behave differently when used in an infinite scroll data source.</p>\n<p>First, there is no filter, sort or pagination done by the client, all custom triggers requires server interaction.\nIf you don't register for a custom trigger it is simply ignored.</p>\n<p>If you do register, it will trigger an event as before with the <code class=\"language-text\">eventSource</code> property set to <code class=\"language-text\">customTrigger</code>.</p>\n<div pbl-example-view=\"pbl-custom-triggers-example\"></div>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n If you've enabled the global configuration \n<code class=\"language-text\">clearContextOnSourceChanging</code>\n (disabled by default) note that it does not play nicely with infinite scroll\nand the context will get cleared every time data is fetched!\n</blockquote>\n<h2 id=\"row-customization-pblngridinfinitevirtualrowdef\"><a href=\"#row-customization-pblngridinfinitevirtualrowdef\" aria-hidden><span class=\"icon icon-link\"></span></a>Row Customization <code class=\"language-text\">*pblNgridInfiniteVirtualRowDef</code></h2>\n<p>...</p>\n<h2 id=\"infinite-scroll-options\"><a href=\"#infinite-scroll-options\" aria-hidden><span class=\"icon icon-link\"></span></a>Infinite Scroll Options</h2>\n<p>...</p>\n<h2 id=\"infinite-scroll-cache-strategies\"><a href=\"#infinite-scroll-cache-strategies\" aria-hidden><span class=\"icon icon-link\"></span></a>Infinite Scroll Cache Strategies</h2>\n<p>...</p>\n<h3 id=\"sequence-blocks\"><a href=\"#sequence-blocks\" aria-hidden><span class=\"icon icon-link\"></span></a>Sequence Blocks</h3>\n<p>...</p>\n<h3 id=\"fragmented-blocks\"><a href=\"#fragmented-blocks\" aria-hidden><span class=\"icon icon-link\"></span></a>Fragmented Blocks</h3>\n<p>...</p>\n<h4 id=\"strictpaging\"><a href=\"#strictpaging\" aria-hidden><span class=\"icon icon-link\"></span></a>strictPaging</h4>\n<p>...</p>\n"}