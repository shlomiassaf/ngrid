{"id":"features/column/cell-edit","title":"Cell Edit","contents":"<h1 id=\"cell-edit\"><a href=\"#cell-edit\" aria-hidden><span class=\"icon icon-link\"></span></a>Cell Edit</h1>\n<p>Cell editing is supported programmatically (<code class=\"language-text\">ColumnApi</code>) and through the UI (mouse/touch) using the <code class=\"language-text\">target-events</code> plugin.</p>\n<p>Let's start with a simple example:</p>\n<div pbl-example-view=\"pbl-cell-edit-example\"></div>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The \n<code class=\"language-text\">First Render</code>\n column will show if the row was first rendered or it was already rendered, this is valid for Virtual Scroll enabled grid.\n</blockquote>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n If you wondering what is the \n<code class=\"language-text\">[pblCellEditAutoFocus]</code>\n directive, it is just a simple \n<em>helper</em>\n directive that will handle auto-focusing logic of\nthe input element.\n</blockquote>\n<h2 id=\"edit-template\"><a href=\"#edit-template\" aria-hidden><span class=\"icon icon-link\"></span></a>Edit Template</h2>\n<p>An edit template is one of <a [routerLink]=\"['../..', 'concepts', 'column-templates']\">several template types</a> we can attach to a data column.</p>\n<p>The <code class=\"language-text\">edit template</code> acts as the <strong>write-only</strong> cell view and the <code class=\"language-text\">main template</code> is the <strong>read-only</strong> cell view. For cells to be <em>editable</em> they\nmust belong to a column with an edit template.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n There is no default edit template, you can use \n<code class=\"language-text\">*</code>\n to define one but the table does not include one like it does for the main template.\n</blockquote>\n<p>In the example above there are 2 cell definitions inside the table that handle the <code class=\"language-text\">name</code> column:</p>\n<ul>\n<li><code class=\"language-text\">pblNgridCellDef</code> defining the read-only view of the cell</li>\n<li><code class=\"language-text\">pblNgridCellEditorDef</code> defining the write view of the cell.</li>\n</ul>\n<p>These are the specific property directives definitions, there are also type based definitions:</p>\n<ul>\n<li><code class=\"language-text\">pblNgridCellTypeDef</code> defining the read-only view of the cell</li>\n<li><code class=\"language-text\">pblNgridCellEditorTypeDef</code> defining the write view of the cell.</li>\n</ul>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridCellDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>name<span class=\"token punctuation\">'</span>; let ctx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.startEdit()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ ctx.value }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>The read-only definition is straight-forward, the main change is that we use the cell context to invoke a <code class=\"language-text\">startEdit()</code> command.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridCellEditorDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>name<span class=\"token punctuation\">'</span>; let ctx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">#input</span> <span class=\"token attr-name\">[value]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.value<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(change)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.value = $event.target.value<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(blur)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.stopEdit()<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(ngAfterViewInit)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>input.focus()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>The write only view also make use if the cell context (`PblNgridCellContext) to assign the new value and to exit editing when the input is out of focus.</p>\n<h3 id=\"cell-context\"><a href=\"#cell-context\" aria-hidden><span class=\"icon icon-link\"></span></a>Cell context</h3>\n<p>The cell context is used to toggle between write and read view's, i.e. toggle between the edit and main templates.</p>\n<p>We start editing by invoking <code class=\"language-text\">PblNgridCellContext.startEdit()</code> and stop editing with <code class=\"language-text\">PblNgridCellContext.stopEdit()</code>.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n An edit template is mandatory. Calling \n<code class=\"language-text\">PblNgridCellContext.startEdit()</code>\n when the column does not have an edit template will be ignored.\nNote that this is the only restriction.\n</blockquote>\n<h2 id=\"the-editable-definition\"><a href=\"#the-editable-definition\" aria-hidden><span class=\"icon icon-link\"></span></a>The <code class=\"language-text\">editable</code> definition</h2>\n<p>The column definitions include the <code class=\"language-text\">editable</code> property, indicating if a column is editable or not.\nWhen set to <code class=\"language-text\">true</code> (and an edit template exists) the cell will include the CSS class <strong>pbl-ngrid-editable-cell</strong>.</p>\n<p>The <code class=\"language-text\">editable</code> flag has no impact in <code class=\"language-text\">PblNgridCellContext.startEdit()</code> but it might be used by plugins or by the developer to\ncreate <em>editing logic</em></p>\n<p>For example, the directives <code class=\"language-text\">cellEditClick</code> / <code class=\"language-text\">cellEditDblClick</code> (<strong>target-events</strong> plugin) allow simple editing integration that\nuse mouse/touch inputs to toggle editing and use the <code class=\"language-text\">editable</code> flag to determine if a cell is editable or not.</p>\n<h2 id=\"triggering-edits-globally\"><a href=\"#triggering-edits-globally\" aria-hidden><span class=\"icon icon-link\"></span></a>Triggering edits globally</h2>\n<p>The previous example was naive, triggering of cell edit for a specific cell. For scale we want to be able to trigger cell edit\nat a higher level, once for all editable cells.</p>\n<p>For this we make use of the <code class=\"language-text\">target-events</code> plugin that allow us to handle specific cell events in a single place.</p>\n<div pbl-example-view=\"pbl-cell-edit-global-trigger-example\"></div>\n<p>This time, clicking on a cell in the <strong>lead</strong> column will start edit mode.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span> <span class=\"token attr-name\">(cellClick)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$event.context.startEdit()<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">[dataSource]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ds2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[columns]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>columns2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridCellEditorDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>lead<span class=\"token punctuation\">'</span>; let ctx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">#cb</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[checked]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.value<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">(change)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>changeCheckbox(cb, ctx)<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">(blur)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.stopEdit()<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">(ngAfterViewInit)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cb.focus()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>Now we only need to defined an edit template for the cell and let the table handle the click events.<br>\nThis time we used <code class=\"language-text\">(cellClick)</code> but we can also use <code class=\"language-text\">(cellDblClick)</code></p>\n<p>When the checked value changes we use a method to assign the new value and stop cell editing:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">changeCheckbox</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> HTMLInputElement<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">:</span> PblNgridCellContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  ctx<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">stopEdit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Some notes:</p>\n<ul>\n<li>We use <code class=\"language-text\">setTimeout</code> to defer the operation because we are probably within a <code class=\"language-text\">click</code> event which will will start editing right after we stop it.</li>\n<li>We set <code class=\"language-text\">markForCheck</code> to true (<code class=\"language-text\">ctx.stopEdit(true)</code>) to tell the table that something has changed (the editor template is now the read-only template).</li>\n</ul>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n We make use of \n<code class=\"language-text\">ctx.startEdit()</code>\n and \n<code class=\"language-text\">ctx.stopEdit()</code>\n without safety checks, some cell's might not have a cell edit template, some might be editing\nwhile we call \n<code class=\"language-text\">ctx.startEdit()</code>\n. This is safe because both methods will check that the above conditions are met.\n</blockquote>\n<h2 id=\"cell-edit-directives\"><a href=\"#cell-edit-directives\" aria-hidden><span class=\"icon icon-link\"></span></a>Cell edit directives</h2>\n<p>Up to this point we've triggered editing using listeners to click events and without using column metadata.</p>\n<p>The <code class=\"language-text\">target-events</code> plugin comes with a directive that simplify the process, this directive will allow edit for columns with an edit template and\nthe <code class=\"language-text\">editable</code> property set to true.</p>\n<div pbl-example-view=\"pbl-cell-edit-directives-example\"></div>\n<p>In this example we've used an advanced editing component, the data picker from <code class=\"language-text\">@angular/material2</code> applied on every column\nof type <code class=\"language-text\">date</code>, in our case the <strong>birthdate</strong> column.</p>\n<p>We used the <code class=\"language-text\">cellEditClick</code> directive to apply cell editing when a click event is fired on a cell, for double click we will use <code class=\"language-text\">cellEditDblClick</code>.</p>\n"}