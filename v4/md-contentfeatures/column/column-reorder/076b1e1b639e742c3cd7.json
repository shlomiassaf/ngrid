{"id":"features/column/column-reorder","title":"Column Reorder","contents":"<h1 id=\"column-reordering\"><a href=\"#column-reordering\" aria-hidden><span class=\"icon icon-link\"></span></a>Column Reordering</h1>\n<p>Changing the display order of a column is supported programmatically (<code class=\"language-text\">ColumnApi</code>) and through the UI (mouse/touch) using the <code class=\"language-text\">drag</code> plugin.</p>\n<h2 id=\"using-the-columnapi\"><a href=\"#using-the-columnapi\" aria-hidden><span class=\"icon icon-link\"></span></a>Using the <code class=\"language-text\">ColumnApi</code></h2>\n<p>The <code class=\"language-text\">ColumnApi</code> provides methods for <strong>moving</strong> or <strong>swapping</strong> columns.</p>\n<p>Both  <strong>moving</strong> and <strong>swapping</strong> does not enforce business logic, It is up to the caller to implement such.\nFor example, the <code class=\"language-text\">drag</code> plugin extends the column definition with the <code class=\"language-text\">reorder</code> property and enforce it internally.\nThe <code class=\"language-text\">ColumnApi</code> does now know anything about <code class=\"language-text\">reorder</code>.</p>\n<h3 id=\"moving-columns\"><a href=\"#moving-columns\" aria-hidden><span class=\"icon icon-link\"></span></a>Moving columns</h3>\n<p>Moving of a column (<strong>\"origin\"</strong>) is done relative to another column (<strong>\"anchor\"</strong>) and effects\nall columns between the origin and anchor (\"<strong>\"group\"</strong>)</p>\n<p>The <strong>origin</strong> will take the place of the <strong>anchor</strong>, incrementing or decrementing the <strong>anchor</strong> and <strong>group</strong> by 1.\nIf the origin was <strong>before</strong> the anchor, the anchor and group will move decrement, otherwise increment.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Only visible (not hidden) columns can move, if at least one column is hidden the move is rejected.\n</blockquote>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token function\">moveColumn</span><span class=\"token punctuation\">(</span>column<span class=\"token operator\">:</span> PblColumn<span class=\"token punctuation\">,</span> anchor<span class=\"token operator\">:</span> PblColumn<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>It is also possible to provide an index, representing the location of the anchor column.\nThe index should reflect the position <strong>inside the group of rendered columns</strong>, i.e: the columns that are not hidden.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token function\">moveColumn</span><span class=\"token punctuation\">(</span>column<span class=\"token operator\">:</span> PblColumn<span class=\"token punctuation\">,</span> renderColumnIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n We recommend moving with absolute columns, if you are working with index's use the methods in \n<code class=\"language-text\">ColumnApi</code>\n to resolve to \n<code class=\"language-text\">PblColumn</code>\n</blockquote>\n<h3 id=\"swapping-columns\"><a href=\"#swapping-columns\" aria-hidden><span class=\"icon icon-link\"></span></a>Swapping columns</h3>\n<p>Swapping a column is done against another column, resulting in change of position between the two.</p>\n<p>Similar to moving, swapping require 2 columns both visible however swapping will only effect these columns\nleaving the group of columns between the 2 in the same place.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token function\">swapColumns</span><span class=\"token punctuation\">(</span>col1<span class=\"token operator\">:</span> PblColumn<span class=\"token punctuation\">,</span> col2<span class=\"token operator\">:</span> PblColumn<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<div pbl-example-view=\"pbl-moving-with-the-api-example\"></div>\n<h2 id=\"using-the-drag-plugin\"><a href=\"#using-the-drag-plugin\" aria-hidden><span class=\"icon icon-link\"></span></a>Using the <code class=\"language-text\">drag</code> plugin</h2>\n<p>The <code class=\"language-text\">drag</code> plugin add support for column reordering through mouse or touch and the ability to define which columns are allowed to move.</p>\n<p>Let's start with a simple example:</p>\n<div pbl-example-view=\"pbl-column-reorder-example\"></div>\n<p>To enable column reordering:</p>\n<ol>\n<li>The directive <code class=\"language-text\">[columnReorder]</code> must be applied on the table</li>\n<li>Each column must have the <code class=\"language-text\">reorder</code> property set to true.</li>\n</ol>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n When we registered \n<code class=\"language-text\">PblNgridDragModule</code>\n we used \n<code class=\"language-text\">PblNgridDragModule.withDefaultTemplates()</code>\n which pre-loads\ndefault templates for the plugin to work out of the box, we will cover customization shortly.\n</blockquote>\n<h2 id=\"locking-columns\"><a href=\"#locking-columns\" aria-hidden><span class=\"icon icon-link\"></span></a>Locking columns</h2>\n<p>Notice that we allow reordering for columns <strong>name</strong> and <strong>gender</strong>, but as they change position they move other columns, even if they have <code class=\"language-text\">reorder: false</code>.<br>\nThe <code class=\"language-text\">reorder</code> property controls if the column can be dragged or not, nothing more.\nTo lock a column for reordering we need to enable the <code class=\"language-text\">wontBudge</code> property.</p>\n<div pbl-example-view=\"pbl-locking-columns-example\"></div>\n<p>We've enabled <code class=\"language-text\">wontBudge</code> in columns <strong>in</strong> and <strong>birthdate</strong>, trying to re-order columns before/after them will not work.<br>\nNotice that we now enabled <code class=\"language-text\">reorder</code> on <strong>birthdate</strong>, it will be able to reorder itself but will not allow others to reorder it.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<code class=\"language-text\">wontBudge</code>\n behaves as a lock, fixating the index of the column. Any column with an index lower then a locked column\nwill only be able to re-order itself before that column, any position after the locked column will be locked. Same is true\nthe other way around.\n</blockquote>\n<h2 id=\"reordering-columns-with-groups\"><a href=\"#reordering-columns-with-groups\" aria-hidden><span class=\"icon icon-link\"></span></a>Reordering columns with groups</h2>\n<p>By default, a group has no effect on reordering of columns but it is possible to opt-in for a group lock on it's columns.</p>\n<p>To enable group columns lock set the <code class=\"language-text\">lockColumns</code> property on the group definitions to <strong>true</strong>.</p>\n<div pbl-example-view=\"pbl-group-columns-lock-example\"></div>\n<p>When a group is not locked it can split by a re-order of an other column or one of it's own columns. A locked group does not allow it's own columns\nto split, not actively and not passively.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Replacing or breaking the relationship between a column and a group is not possible via reordering. To break this relationship a new\ngroup definition is required, creating a new column definition set.\n</blockquote>\n<h2 id=\"customization-and-manual-control\"><a href=\"#customization-and-manual-control\" aria-hidden><span class=\"icon icon-link\"></span></a>Customization and manual control</h2>\n<p>At the beginning, we've mentioned that we opted in for the default templates, these allow easy setup of the reordering feature. To customize the\nbehavior and/or look of the reordering process we need override these templates.</p>\n<p>To override reordering we need to provide a template that the table will use to render the drag element that listen to all mouse/touch events\nand act upon them.</p>\n<p>To do that we use the structural directive <code class=\"language-text\">*pblNgridCellDraggerRef</code>. This directive will automatically register the template for us\nand provide us with the <strong>column*</strong> and <strong>table</strong> instances as context:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblNgridMetaCellTemplateContext<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  $implicit<span class=\"token operator\">:</span> PblNgridMetaCellTemplateContext<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  col<span class=\"token operator\">:</span> PblMetaColumn <span class=\"token operator\">|</span> PblColumn<span class=\"token punctuation\">;</span>\n  table<span class=\"token operator\">:</span> PblNgridComponent<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>The default re-order template in <code class=\"language-text\">PblNgridDragModule.withDefaultTemplates()</code> is fairly simple:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">*pblNgridCellDraggerRef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let ctx<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[pblNgridColumnDrag]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>We use <code class=\"language-text\">*pblNgridCellDraggerRef</code> to instruct the table which template to use pass the context to <code class=\"language-text\">[pblNgridColumnDrag]</code> which does all the reordering business.</p>\n<p><code class=\"language-text\">[pblNgridColumnDrag]</code> is a directive that the plugin provides. It extends <code class=\"language-text\">CdkDrag</code> adding some logic for the re-order scenario.</p>\n<h3 id=\"manual-all-the-way\"><a href=\"#manual-all-the-way\" aria-hidden><span class=\"icon icon-link\"></span></a>Manual all the way</h3>\n<p><code class=\"language-text\">[pblNgridColumnDrag]</code> is just our way of doing it, for complete custom handling, one might do:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-custom-drag-handler</span> <span class=\"token attr-name\">*pblNgridCellDraggerRef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let ctx<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[table]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.table<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[column]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-custom-drag-handler</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p><code class=\"language-text\">my-custom-drag-handler</code> will be rendered on each header cell and should take care of all re-order logic.</p>\n<p>You can extend <code class=\"language-text\">[pblNgridColumnDrag]</code>, make it a component, add your custom drag handler icons and more..</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The \n<code class=\"language-text\">drag</code>\n plugin is using \n<code class=\"language-text\">@angular/cdk/drag</code>\n as the low level package for handling drag and drop, you can benefit from other\nfeatures this library offers when building you own custom solution.\n</blockquote>\n"}