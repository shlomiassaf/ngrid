{"id":"features/column/column-sort","title":"Column Sort","contents":"<h1 id=\"column-sorting\"><a href=\"#column-sorting\" aria-hidden><span class=\"icon icon-link\"></span></a>Column Sorting</h1>\n<p>In NGrid, column sorting is the re-ordering of datasource items based on <strong>logic</strong> and <strong>sort order</strong> (criterion).  </p>\n<blockquote>\n<p>This section covers the basics of sorting, custom sorting and programmatic sorting. For UI reactive sorting (click on header to sort) see the <a href=\"../../../plugins/ngrid-material/mat-sort\">sorting section</a> in the material plugin.</p>\n</blockquote>\n<h2 id=\"sort-order\"><a href=\"#sort-order\" aria-hidden><span class=\"icon icon-link\"></span></a>Sort Order</h2>\n<p>The <code class=\"language-text\">sort order</code> defines the sort state (on/off) and logical order:</p>\n<ul>\n<li><strong>asc</strong> - Ascending order (start to end, 1 to 10, A to Z)</li>\n<li><strong>desc</strong> - Descending order (end to start, 10 to 1, A to A)</li>\n<li><code class=\"language-text\">undefined</code> - Sorting is not enabled</li>\n</ul>\n<h2 id=\"sort-logic\"><a href=\"#sort-logic\" aria-hidden><span class=\"icon icon-link\"></span></a>Sort Logic</h2>\n<p>The sort logic is where we determine if a value comes before or after another value.</p>\n<p>For example, sorting a numeric column will be based on the decimal numeric system. Sorting of a textual column will be based on the alphabet order.</p>\n<h2 id=\"sorting-function\"><a href=\"#sorting-function\" aria-hidden><span class=\"icon icon-link\"></span></a>Sorting Function</h2>\n<p>To sort a column a sorting function is <strong>required</strong>. The sorting function accepts the <strong>column</strong>, <strong>sort order</strong> &#x26; <strong>data set</strong> and returns a sorted data-set, it is the implementation of the sort logic.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblNgridSorter<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>column<span class=\"token operator\">:</span> PblColumn<span class=\"token punctuation\">,</span> sort<span class=\"token operator\">:</span> PblNgridSortInstructions<span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The sorting function is \n<strong>required</strong>\n for every column we want to sort but there is a default sorting function attached to all sortable column if no custom one attached.\n</blockquote>\n<h2 id=\"sortable-columns\"><a href=\"#sortable-columns\" aria-hidden><span class=\"icon icon-link\"></span></a>Sortable Columns</h2>\n<p>By default, columns are not sortable, to enable sorting the <code class=\"language-text\">sort</code> property must be set on the column definitions:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblColumnDefinition</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PblBaseColumnDefinition</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  sort<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> PblNgridSorter<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Note that you can set a <code class=\"language-text\">boolean</code> or a sorting function (<code class=\"language-text\">PblNgridSorter</code>).</p>\n<ul>\n<li>If <code class=\"language-text\">true</code> is set, the column is marked sortable and no sorting logic is attached to it.</li>\n<li>If a sorting function is set, the column is marked sortable and the custom sorting logic is stored.</li>\n</ul>\n<p>Wether <code class=\"language-text\">true</code> or a function is set, the sort function used is picked when sorting is applied. This is covered later in \"Picking a Sorting function\"</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Note that defining \n<code class=\"language-text\">sort</code>\n for a column does not activate it, to activate a sorting for a column you need to use the API.\n</blockquote>\n<h2 id=\"activating-sort-for-a-column\"><a href=\"#activating-sort-for-a-column\" aria-hidden><span class=\"icon icon-link\"></span></a>Activating Sort for a Column</h2>\n<p>Column sorting can be activated 2 locations:</p>\n<ol>\n<li>DataSource API</li>\n<li>Grid Instance API</li>\n</ol>\n<p>Both APIs are similar, with the Grid API adding some sugar on top of the DataSource API.</p>\n<p>Let's take a quick look at the <strong>DataSource API</strong> signature:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token comment\">/**\n   * Clear the current sort definitions.\n   * @param skipUpdate When true will not update the datasource, use this when the data comes sorted and you want to sync the definitions with the current data set.\n   * default to false.\n   */</span>\n  <span class=\"token function\">setSort</span><span class=\"token punctuation\">(</span>skipUpdate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * Set the sorting definition for the current data set.\n   * @param column\n   * @param sort\n   * @param skipUpdate When true will not update the datasource, use this when the data comes sorted and you want to sync the definitions with the current data set.\n   * default to false.\n   */</span>\n  <span class=\"token function\">setSort</span><span class=\"token punctuation\">(</span>column<span class=\"token operator\">:</span> PblColumn<span class=\"token punctuation\">,</span> sort<span class=\"token operator\">:</span> PblNgridSortDefinition<span class=\"token punctuation\">,</span> skipUpdate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>The 1st signature is used for clearing up the current sort.<br>\nThe 2nd signature is used for defining a new sort.</p>\n<p>The <strong>Grid Instance API</strong> is quite identical:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token function\">setSort</span><span class=\"token punctuation\">(</span>skipUpdate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setSort</span><span class=\"token punctuation\">(</span>columnOrSortAlias<span class=\"token operator\">:</span> PblColumn <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> sort<span class=\"token operator\">:</span> PblNgridSortDefinition<span class=\"token punctuation\">,</span> skipUpdate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>The difference is that we can provide a column id or alias instance of a column instance and the grid will find the instance for us and use\nthe DataSource API to activate the sort.</p>\n<h3 id=\"sorting-definitions\"><a href=\"#sorting-definitions\" aria-hidden><span class=\"icon icon-link\"></span></a>Sorting Definitions</h3>\n<p>The 2nd parameter in <code class=\"language-text\">setSort</code> is the <code class=\"language-text\">PblNgridSortDefinition</code>:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblNgridSortDefinition</span> <span class=\"token punctuation\">{</span>\n  order<span class=\"token operator\">:</span> PblNgridSortOrder<span class=\"token punctuation\">;</span>\n  sortFn<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblNgridSorter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>The sort definitions is made up of:</p>\n<ul>\n<li><strong>order</strong> - The sort order we want to use ('asc' or 'desc')</li>\n<li><strong>sortFn</strong> - The sort function (logic) we want to use (optional)</li>\n</ul>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The \n<strong>sortFn</strong>\n is optional, see the \"Picking a Sorting function\" for more details.\n</blockquote>\n<h2 id=\"picking-a-sorting-function\"><a href=\"#picking-a-sorting-function\" aria-hidden><span class=\"icon icon-link\"></span></a>Picking a Sorting function</h2>\n<p>When sorting is applied the grid will search for a sorting function in the following order and choose the <strong>first match</strong>:</p>\n<ul>\n<li><code class=\"language-text\">PblNgridSortDefinition.sortFn</code></li>\n<li>The sorting function defined on the <code class=\"language-text\">sort</code> property of the column definition</li>\n<li>The default sorting function</li>\n</ul>\n<p>In other words, providing a sorting function to <code class=\"language-text\">setSort</code> will override any sorting function defined on the column definitions.\nIf no function provided and no sorting function exists on the column definition, the default sorting function is used.</p>\n<h2 id=\"the-default-sorting-function\"><a href=\"#the-default-sorting-function\" aria-hidden><span class=\"icon icon-link\"></span></a>The Default Sorting Function</h2>\n<p>The default sorting function is very simple, it uses the <code class=\"language-text\">&lt;</code> and <code class=\"language-text\">&gt;</code> operators to determine the logical order between 2 values. This is applied on all data types.</p>\n<div pbl-example-view=\"pbl-column-sort-example\"></div>\n<div pbl-example-view=\"pbl-column-specific-sorting-example\"></div>\n<h2 id=\"aliasing\"><a href=\"#aliasing\" aria-hidden><span class=\"icon icon-link\"></span></a>Aliasing</h2>\n<p>Aliasing is just another way to reference a column indirectly (i.e. not through it's object reference).</p>\n<p>First, let's review the the basic indirect column reference, <code class=\"language-text\">id</code>:</p>\n<h3 id=\"the-id-reference\"><a href=\"#the-id-reference\" aria-hidden><span class=\"icon icon-link\"></span></a>The <code class=\"language-text\">id</code> reference</h3>\n<p>Each column has an <code class=\"language-text\">id</code> property that is used to uniquely identify the column.\nThe <code class=\"language-text\">id</code> property is <strong>optional</strong>, when not set the grid will automatically assign the value provided in <code class=\"language-text\">prop</code> (which should be unique).</p>\n<p>For example:</p>\n<ul>\n<li>If we set <strong>prop</strong> to <code class=\"language-text\">age</code> but don't set <strong>id</strong>, <strong>id</strong> will be <code class=\"language-text\">age</code>.</li>\n<li>If we set <strong>prop</strong> to <code class=\"language-text\">info.age</code> but don't set <strong>id</strong>, <strong>id</strong> will be <code class=\"language-text\">info.age</code>.</li>\n<li>If we set <strong>pro</strong> to <code class=\"language-text\">age</code> and <strong>id</strong> to <code class=\"language-text\">age_column</code>, <strong>id</strong> will be <code class=\"language-text\">age_column</code>.</li>\n</ul>\n<p>In most cases, setting the <strong>id</strong> specifically is not required, redundant and verbose with no gain.<br>\nHowever, in some cases, you might want to set <strong>id</strong> if the <strong>prop</strong> does not reflect a real property (virtual column).</p>\n<h3 id=\"the-alias-reference\"><a href=\"#the-alias-reference\" aria-hidden><span class=\"icon icon-link\"></span></a>The <code class=\"language-text\">alias</code> reference</h3>\n<p>Alias is a property in the column definition (<code class=\"language-text\">alias</code>) that creates an alias id to the column so you can use it as another reference.</p>\n<p>It is very similar to <strong>id</strong> but:</p>\n<ul>\n<li>It is not auto populated when not set</li>\n<li>It is not used by the <code class=\"language-text\">ColumnApi</code> when searching for a column</li>\n</ul>\n<p>The <strong>alias</strong> property is used to reference column in specific APIs like <code class=\"language-text\">PblNgridComponent.setSort</code> and <code class=\"language-text\">PblNgridComponent.setFilter</code>.</p>\n<p>In those APIs <strong>alias</strong> has priority, if set it will be used exclusively in the searching otherwise, when not set, <strong>id</strong> is used.</p>\n<p>Using <strong>id</strong> entirely, ignoring <strong>alias</strong>, is possible and will work. The <strong>alias</strong> property exist to create a clear separation between\nlogical units such as server and client when sorting and filtering operations are involved.</p>\n<p>For example, it is useful if you get list of sortable columns from the server which does not match the actual ids of the column like when using dot path notation in <strong>prop</strong> or\nwhen the server <code class=\"language-text\">sortBy</code> descriptors does not match the column names.</p>\n<p>Of course, you can also use <strong>id</strong> in this case, but <strong>alias</strong> is more descriptive and logically separated when trying to understand the structure.</p>\n"}