{"id":"features/column/column-filter","title":"Column Filter","contents":"<h1 id=\"column-filtering\"><a href=\"#column-filtering\" aria-hidden><span class=\"icon icon-link\"></span></a>Column Filtering</h1>\n<p>Column filtering can be set / configured in 2 locations:</p>\n<ol>\n<li>DataSource (API)</li>\n<li>Grid instance (API)</li>\n</ol>\n<p>In addition, you can configure a column specific filtering behaviour in the column definitions.</p>\n<blockquote class=\"warn icon\">\n  <div class=\"icon-location\"></div>\n  This page refer to client-side filtering where filtering is done in the browser and not on the server. For more information read the <a [routerLink]=\"['../..', 'concepts', 'datasource-quickthrough']\" fragment=\"client-side\">datasource quick-through</a>.\n</blockquote>\n<h2 id=\"activating-a-filter\"><a href=\"#activating-a-filter\" aria-hidden><span class=\"icon icon-link\"></span></a>Activating a filter</h2>\n<p>Activating is done through on of the APIs (DataSource or Grid).</p>\n<p>There are 2 filter types:</p>\n<ul>\n<li>Value filter</li>\n<li>Predicate filter</li>\n</ul>\n<p><strong>Value filter</strong> is managed by the grid, we are activating the filter by providing a value that we want to find a match to in one or more columns.\nIf the value has a match the row will pass the filter, otherwise it will get filtered out.</p>\n<p><strong>Predicate Filter</strong> is un-managed, we have full control over the filtering process. We provide a predicate function that accepts a row\nand a collection of columns and return <code class=\"language-text\">true</code> if the row passed the filter and <code class=\"language-text\">false</code> if not.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n In the most basic level all filters are \n<code class=\"language-text\">predicates</code>\n, the \n<code class=\"language-text\">value</code>\n filter is just an API to organize and simplify the use of function predicates.\n</blockquote>\n<h2 id=\"value-filter\"><a href=\"#value-filter\" aria-hidden><span class=\"icon icon-link\"></span></a>Value Filter</h2>\n<p>The value filter approach is simple and consistent across grid's.\nIt relays on pre-defined filtering behaviour which is used to filter the value.</p>\n<p>The grid comes with one pre-defined behaviour that compares the inclusion (text) of the provided value in a column value.\nFor example, if the filter value is \"oh\" and the value in the column <code class=\"language-text\">name</code> for a given row is \"John\", it will pass the filter.</p>\n<p>Here we search for <code class=\"language-text\">oh</code> in either column <code class=\"language-text\">name</code> or <code class=\"language-text\">email</code>:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">grid<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'oh'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n In the example above me make use of the \n<code class=\"language-text\">Grid instance (API)</code>\n, which allows us to provide a string reference to a column\n</blockquote>\n<p>Of course, this is too generic, filtering the value <strong>11</strong> will return <code class=\"language-text\">211</code>, <code class=\"language-text\">11</code>, <code class=\"language-text\">341123</code>, etc...</p>\n<h3 id=\"value-filter-behaviour\"><a href=\"#value-filter-behaviour\" aria-hidden><span class=\"icon icon-link\"></span></a>Value filter behaviour</h3>\n<p>To really leverage the value filter we need to control how certain column filter certain values.</p>\n<p>This is done in the column definition, where we can set the <code class=\"language-text\">filter</code> property which will act as a predicate\nspecifically for the column it is defined on.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblColumnDefinition</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PblBaseColumnDefinition</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token comment\">/**\n   * A custom predicate function to filter rows using the current column.\n   *\n   * Valid only when filtering by value.\n   * See `PblDataSource.setFilter` for more information.\n   */</span>\n  filter<span class=\"token operator\">?</span><span class=\"token operator\">:</span> DataSourceColumnPredicate<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>The definition for <code class=\"language-text\">DataSourceColumnPredicate</code>:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * A function the return true then the value should be included in the result or false when not.\n * This is a single column filter predicated, returning false will filter out the entire row but the\n * predicate is only intended to filter a specific column.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">DataSourceColumnPredicate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>filterValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> colValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> row<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> col<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblColumn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>A function that accept a <code class=\"language-text\">filterValue</code> (the value to filter by), a <code class=\"language-text\">colValue</code> (the value of the cell for the column for a given row), the row and the column instance.</p>\n<p>For example, a numeric filter:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">numericFilter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>filterValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> colValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> filterValue <span class=\"token operator\">===</span> colValue</code></pre></div></div>\n<p>Now, let's build a numeric range filter:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">numericFilter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>filterValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> colValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> colValue <span class=\"token operator\">></span> <span class=\"token operator\">??</span><span class=\"token operator\">?</span>  <span class=\"token operator\">&amp;&amp;</span> colValue <span class=\"token operator\">&lt;</span> <span class=\"token operator\">??</span><span class=\"token operator\">?</span></code></pre></div></div>\n<p>We're stuck, we need the min / max value of the range. The <code class=\"language-text\">filterValue</code> does not have to be of the same type of the column we're filtering...</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">numericRangeFilter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>filterValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> min<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> max<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> colValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> colValue <span class=\"token operator\">></span> filterValue<span class=\"token punctuation\">.</span>min <span class=\"token operator\">&amp;&amp;</span> colValue <span class=\"token operator\">&lt;</span> filterValue<span class=\"token punctuation\">.</span>max</code></pre></div></div>\n<p>Which we will activate like this:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">grid<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> min<span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> max<span class=\"token operator\">:</span> <span class=\"token number\">120</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>These are simple examples, they can be extended per your requirements, using a dedicated library or your own custom logic.</p>\n<h3 id=\"real-world-value-filters\"><a href=\"#real-world-value-filters\" aria-hidden><span class=\"icon icon-link\"></span></a>Real-world value filters</h3>\n<p>As you might have realized by now, value filters are powerful because they allow to create a reusable filtering system\nfor the entire app without much effort.</p>\n<p>Combined with the <code class=\"language-text\">type</code> property you can automate the assignment of filters based on types.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n In the future, we hope to release a column pack package with pre-defined sorting and filtering predicates attached to\npre-defined types.\n</blockquote>\n<h3 id=\"value-filter-cons\"><a href=\"#value-filter-cons\" aria-hidden><span class=\"icon icon-link\"></span></a>Value filter cons</h3>\n<p>Currently, you can't join 2 (or more) values filters into a single AND or OR expression</p>\n<div pbl-example-view=\"pbl-column-filter-example\"></div>\n<h2 id=\"predicate-filter\"><a href=\"#predicate-filter\" aria-hidden><span class=\"icon icon-link\"></span></a>Predicate Filter</h2>\n<p>The predicate filter is the \"hands-on\" manual approach.</p>\n<p>Instead of accepting a value, it accepts a function of type <code class=\"language-text\">DataSourcePredicate</code>:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * A function the return true then the row should be included in the result or false when not.\n * @param row The row in the data source that the filter apply on\n * @param properties A list of column instances (`PblColumn`) to filter values by.\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">DataSourcePredicate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>row<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> properties<span class=\"token operator\">:</span> PblColumn<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>Like the value filter predicate function (<code class=\"language-text\">DataSourceColumnPredicate</code>) its job is to determine if a row is passed\nthe filter or not (filtered out).</p>\n<p>However, value filter predicates work on the column level, a specific column in a row.</p>\n<p>Here we work on the row level, the grid will provide the rows to the filter, one by one, including the columns participating the in filtering process.\nThe filter is responsible from here, for the entire row including it's columns.</p>\n<p>In most cases, value filters will do the job, but for more complex scenarios we can use the predicate filter.</p>\n<p>A good example for predicate filtering in action is <a [routerLink]=\"['../..', 'stories', 'multi-column-filter']\">the multi-column filter</a> which demonstrate\nfiltering using 2 (or more) columns at the same time.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Value filters are implemented using a special predicate filter that manage the process.\n</blockquote>\n<h3 id=\"syncing-the-filter\"><a href=\"#syncing-the-filter\" aria-hidden><span class=\"icon icon-link\"></span></a>Syncing the filter</h3>\n<p>Syncing the filter is simply re-running the filtering process with the current filter registered.</p>\n<p>Calling <code class=\"language-text\">setFilter</code> with the same filter function will not work because the filter is cached.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">grid<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>myPredicateFunction<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>Instead, use:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">grid<span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span><span class=\"token function\">syncFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>You might ask why a re-running the filter is needed? great question!</p>\n<p>If you're running a value filter then no, you don't need to sync the filter, just call <code class=\"language-text\">setFilter</code> with the new value.</p>\n<p>If you're running a predicate filter, use the <code class=\"language-text\">syncFilter</code> to re-run the filter when the value changes. In predicate filter there is\nno \"value\" to filter by, you provide it so a mechanism to update the filter based on value updates is required.</p>\n<p>The the multi-column filter example (link above) makes use of <code class=\"language-text\">syncFilter</code>.</p>\n<h2 id=\"clearing-the-filter\"><a href=\"#clearing-the-filter\" aria-hidden><span class=\"icon icon-link\"></span></a>Clearing The filter</h2>\n<p>To clear the current filter call the <code class=\"language-text\">setFilter</code> method with no parameters</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">grid<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<h2 id=\"accessing-filtered-data\"><a href=\"#accessing-filtered-data\" aria-hidden><span class=\"icon icon-link\"></span></a>Accessing Filtered Data</h2>\n<p>The data store holds the last filtered subset, located in <code class=\"language-text\">PblDataSource.filteredData</code>.</p>\n<p>The <code class=\"language-text\">filteredData</code> property will always return an array, either empty or populated.</p>\n"}