{"id":"features/column/column-transform","title":"Column Transform","contents":"<h1 id=\"column-transform\"><a href=\"#column-transform\" aria-hidden><span class=\"icon icon-link\"></span></a>Column Transform</h1>\n<p>A Column transform means taking a value of a cell and transforming (without mutating the raw data).</p>\n<p>There are 2 ways to transform the data:</p>\n<h2 id=\"transform-using-a-template\"><a href=\"#transform-using-a-template\" aria-hidden><span class=\"icon icon-link\"></span></a>Transform using a template</h2>\n<p>This is just cell templating:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridCellTypeDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>numberTimes100<span class=\"token punctuation\">'</span>; value as value; row as row; col as col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  {{ value * 100 }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<h2 id=\"transform-using-a-function\"><a href=\"#transform-using-a-function\" aria-hidden><span class=\"icon icon-link\"></span></a>Transform using a function</h2>\n<p>We transform by providing a transformation function to the <code class=\"language-text\">transform</code> property in the column definitions:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblColumnDefinition</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PblBaseColumnDefinition</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token comment\">/**\n   * Optional transformer that control the value output from the combination of a column and a row.\n   * The value returned from this transformer will be returned from `PblColumn.getValue`\n   */</span>\n  transform<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> row<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> col<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblColumn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Function parameters:</p>\n<ul>\n<li><strong>value</strong> is the value of the cell your are transforming.</li>\n<li><strong>row</strong> is the entire row.</li>\n<li><strong>col</strong> is the <code class=\"language-text\">PblColumn</code> instance.</li>\n</ul>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PERCENT_TO_INTEGER</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">COLUMNS</span> <span class=\"token operator\">=</span> <span class=\"token function\">columnFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'percent'</span><span class=\"token punctuation\">,</span> transform<span class=\"token operator\">:</span> <span class=\"token constant\">PERCENT_TO_INTEGER</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Never call \n<code class=\"language-text\">col.getValue(row)</code>\n from a \n<code class=\"language-text\">transform</code>\n function as it will loop indefinitely (read more below...)\n</blockquote>\n<h2 id=\"when-to-use\"><a href=\"#when-to-use\" aria-hidden><span class=\"icon icon-link\"></span></a>When to use</h2>\n<p>When transforming, choosing how might be confusing. Template transformation is surely the easiest option but the necessarily the best one:</p>\n<ul>\n<li>Templates are slower than functions</li>\n<li>Template composition is more difficult</li>\n<li>Templates only live in the renderer and can not be used elsewhere.</li>\n</ul>\n<p>That is,</p>\n<ul>\n<li>Rendering a template is more costly than invoking a method</li>\n<li>In most cases a template might already exists for the cell that you would want to use, how will you combine the 2?</li>\n<li>Templates are UI only, for example, they will not effect exporting (e.g. excel) but <code class=\"language-text\">transform</code> functions will</li>\n</ul>\n<p>Use templates for UI related transformation (e.g. formatting, image from string, etc...).</p>\n<p><strong>As a general rule of thumb, if you can transform something using a function, use a function transformer and not a template transformer.</strong></p>\n<h2 id=\"understanding-transform-order\"><a href=\"#understanding-transform-order\" aria-hidden><span class=\"icon icon-link\"></span></a>Understanding transform order</h2>\n<p>To render a cell template, the grid will first extract the value for the cell and provide it to the template.</p>\n<p>For that it will use the column instance (<strong>col</strong>) and row instance (<strong>row</strong>) to get the value:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> col<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>It will take the value and pass it to the template, along with the column instance and the row instance.</p>\n<p><code class=\"language-text\">PblColumn.getValue</code> is, by the way, a public method that you can use if you have a column instance and a row object</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Never call \n<code class=\"language-text\">PblColumn.getValue</code>\n inside a \n<code class=\"language-text\">transform</code>\n function!!!\n</blockquote>\n<p>Inside <code class=\"language-text\">PblColumn.getValue</code>, the grid will:</p>\n<ul>\n<li>Extract the value from the row using the property this column points to</li>\n<li>If a <code class=\"language-text\">transform</code> function is provided<ul>\n<li>Call the <code class=\"language-text\">transform</code> function with the extracted value, the column instance and row instance</li>\n<li>Return the value return from the <code class=\"language-text\">transform</code> function</li>\n</ul></li>\n<li>Else, return the extracted value</li>\n</ul>\n<p>So the order is first calling the <code class=\"language-text\">transform</code> function (if provided) and then rendering the cell template.</p>\n<p>Because <code class=\"language-text\">PblColumn.getValue</code> is calling the <code class=\"language-text\">transform</code> function internally, providing the value, row and column,\nit is possible to invoke <code class=\"language-text\">col.getValue(row)</code> again from within the <code class=\"language-text\">transform</code> function, which will cause\na recursive loop until an overflow exception is throw, <strong>please avoid it</strong></p>\n"}