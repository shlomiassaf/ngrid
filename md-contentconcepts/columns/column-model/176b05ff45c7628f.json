{"id":"concepts/columns/column-model","title":"Column Model","contents":"<h1 id=\"the-column-model\"><a href=\"#the-column-model\" aria-hidden><span class=\"icon icon-link\"></span></a>The Column Model</h1>\n<p>Columns are the core building blocks of the table. They describe the structure, behavior and appearance.</p>\n<p>When <strong>rows</strong> (data items) meet <strong>columns</strong> we get a matrix of <strong>cells</strong> we call a table / grid.</p>\n<h2 id=\"column-rows-and-cells\"><a href=\"#column-rows-and-cells\" aria-hidden><span class=\"icon icon-link\"></span></a>Column, Rows and Cells</h2>\n<p>Before we dive, let's take a minute to understand the role of columns, rows and cells.</p>\n<p>A table is a visual display of a data model, we describe the data model through columns.<br>\nLet's illustrate using a class as (our data model) and matching column definitions:</p>\n<div style=\"display: flex\">\n  <div style=\"flex: 1 1 auto\">\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n  </div>\n  <div style=\"flex: 1 1 auto\">\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">COLUMN_DEFS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'email'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p><sup>This is not the final structure that the table accepts, it's here for demonstration only.</sup></p>\n  </div>\n</div>\n<ul>\n<li>Each property of <code class=\"language-text\">Person</code> is a data column.</li>\n<li>An instance of <code class=\"language-text\">Person</code> is a row.</li>\n<li>In a <code class=\"language-text\">Person</code> instance the property <code class=\"language-text\">name</code> is a cell.</li>\n</ul>\n<p>Let's put a single instance of <code class=\"language-text\">Person</code> into a table:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>    email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>The structure of <code class=\"language-text\">COLUMN_DEFS</code> is a simple array containing column items, this is similar to how we define columns <strong>but not the actual way</strong>.<br>\nThere are multiple types of meta rows (header/footer rows) but only data/table meta-rows map to object properties.</p>\n<p>We used a simple format to visually emphasize the connection between a model property and a column, the real data structure:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">COLUMN_DEFS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  table<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    cols<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'email'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>It's similar, however, the column definitions are set in an object with the data/table column defined in <code class=\"language-text\">table.cols</code>.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n If you're unfamiliar with meta-row or data/table rows read the \n<a href=\"../quick-through\">quick-through</a>\n.\n</blockquote>\n<p>And now a live example:</p>\n<div pbl-example-view=\"pbl-columns-simple-model-example\" containerClass=\"mat-elevation-z7\"></div>\n<p>We got 2 rows for 1 instance. The first row represents headers for the data columns and the 2nd row the data itself.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Every table has 1 data header row, 1 data footer row and \n<strong>n</strong>\n amount of  data rows.\n</blockquote>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n You can show/hide the data header row using \n<code class=\"language-text\">showHeader</code>\n (default: \n<code class=\"language-text\">true</code>\n) and the data footer row using \n<code class=\"language-text\">showFooter</code>\n (default: \n<code class=\"language-text\">false</code>\n)\n</blockquote>\n<p>When a row (data item) meets a column a cell is created, the visual shape of the property. The column provides the value and template and the table\nrender's the cell.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n While most columns map to a property on the data model it is not mandatory. A column can also represent a virtual value, similar to class getters.\n</blockquote>\n<h2 id=\"column-types\"><a href=\"#column-types\" aria-hidden><span class=\"icon icon-link\"></span></a>Column Types</h2>\n<p>There are 2 high-level column types:</p>\n<ul>\n<li><strong>Data Columns</strong> (required) - columns that represent data model</li>\n<li><strong>Meta Columns</strong> (optional) - columns that does not represent data: Header, Footer, and Group</li>\n</ul>\n<p>For each high-level column type there is a high-level row type. A row can only host cells of the same column type!</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n There are more column/row types (e.g. Group header column), but all are subset of the above.\n</blockquote>\n<p>All column types share a set of common definitions, we will review them now and move to each type afterwards.</p>\n<h2 id=\"creating-definitions\"><a href=\"#creating-definitions\" aria-hidden><span class=\"icon icon-link\"></span></a>Creating Definitions</h2>\n<p>Together, data and meta columns, define the structure of the grid - a data item model.</p>\n<p>You can build the column definition from JSON or use the <a href=\"../factory\">columns factory</a>.\nWhen working with simple models using JSON is easy, but once the model is big help is needed, especially with meta headers, group headers etc...</p>\n<p>If you're not familiar with the column factory we recommend reading it once you finish this page.</p>\n<p>For each type of column there are 2 entities:</p>\n<ul>\n<li>A simple (JSON like) interface, describing the column</li>\n<li>An concrete class implementation of the column type</li>\n</ul>\n<p>For example, the main column type (data column) has a simple JSON like interface (<code class=\"language-text\">PblColumnDefinition</code>) and a concrete implementation (<code class=\"language-text\">PblColumn</code>)</p>\n<p>Using the factory, the output created are concrete instances but you can use JSON objects as well.</p>\n<p>We will discuss this topic in more detail shortly...</p>\n<h2 id=\"column-definition\"><a href=\"#column-definition\" aria-hidden><span class=\"icon icon-link\"></span></a>Column Definition</h2>\n<p>Each column contains instructions telling the table how to operate, all columns share a basic set of definitions\nbut because each serve a different purpose they also have unique definitions.</p>\n<p>The basic definitions for all columns:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblBaseColumnDefinition</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** A Unique ID for the column. */</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/** A text to display in the column */</span>\n  label<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/** The type of the values in this column. */</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> PblColumnTypeDefinition<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/** CSS class that get applied on the header and cell. */</span>\n  css<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**The width in px or % in the following format: ##% or ##px  Examples: '50%', '50px' */</span>\n  width<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/** This minimum width in pixels */</span>\n  minWidth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/** This maximum width in pixels */</span>\n  maxWidth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/** A place to store things... */</span>\n  data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>These are the basics, most is self-explaining so we will focus on some.</p>\n<h3 id=\"unique-id\"><a href=\"#unique-id\" aria-hidden><span class=\"icon icon-link\"></span></a>Unique ID</h3>\n<p>First thing to note is that each column has a unique id, this is important for identifying and querying columns.\nSome columns will mark the <code class=\"language-text\">id</code> as optional, inferring it internally.</p>\n<h3 id=\"column-type\"><a href=\"#column-type\" aria-hidden><span class=\"icon icon-link\"></span></a>Column type</h3>\n<p>The <strong>type</strong> property has an important role, it defines the type of the column which the table can use in a lot of areas.</p>\n<p>For example, for the type <strong>number</strong> the table can take the template registered for that type and render the cell with number formatting.\nIt doesn't have to be data-types, we can also define the type <strong>image</strong> with a matching template that renders an <code class=\"language-text\">img</code> tag.</p>\n<p>It does not end there, types can be used to filter, sort and more...</p>\n<p>Going back to our model:</p>\n<div style=\"display: flex\">\n  <div style=\"flex: 1 1 auto\">\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n  </div>\n  <div style=\"flex: 1 1 auto\">\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">COLUMN_DEFS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n  </div>\n</div>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n The type does not have to match the property type, for example a string might be an image link have the column type \n<code class=\"language-text\">image</code>\n and a matching template with an \n<code class=\"language-text\">&lt;img&gt;</code>\n tag.\n</blockquote>\n<h3 id=\"width-system\"><a href=\"#width-system\" aria-hidden><span class=\"icon icon-link\"></span></a>Width system</h3>\n<p>Each column has 3 definitions for width, all are optional.\nThe table will look at each column and define it's final width based on these inputs relative to other columns in the table. This is covered in depth <a href=\"../../../features/column/column-width\">here</a>.</p>\n<h2 id=\"the-data-column\"><a href=\"#the-data-column\" aria-hidden><span class=\"icon icon-link\"></span></a>The Data Column</h2>\n<p>We've seen that the data column (from here on just column), represent a property on the data item and also the data header and footer cells.</p>\n<p>Let's take a look again, this time we enable both header and footer rows and use a collection with 3 <code class=\"language-text\">Person</code> instances:</p>\n<div pbl-app-content-chunk=\"pbl-columns-app-content-chunk\" inputs='{ \"section\": 2 }'></div>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n On the left, 3 row markers, indicating the type of each row.\n</blockquote>\n<ul>\n<li>There are 3 data columns, with all columns showing the property value <strong>wrapped in -> &#x3C;-</strong></li>\n<li>There is 1 header row, with all columns showing the property name with <strong>uppercase</strong> and <strong>underline</strong>.</li>\n<li>There is 1 footer row, with all columns showing the property name <strong>wrapped with parentheses</strong></li>\n</ul>\n<p>In fact, there are 3 templates in play for header, footer and data cells.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Data columns can also represent virtual data, not existing on the data item. e.g.: Aggregating multiple properties, timestamps etc...\n</blockquote>\n<h3 id=\"binding-a-column-to-a-property\"><a href=\"#binding-a-column-to-a-property\" aria-hidden><span class=\"icon icon-link\"></span></a>Binding a column to a property</h3>\n<p>Usually, each column is mapped to a property on the data item. Mapping is done by providing the property name (Supporting deep paths including arrays).</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span>\n  dog<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Woof'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> columns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'dog.name'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'Dog Name'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div></div>\n<p>Instead of dot notation, you can use the <strong>path</strong> property with an array of string as the path to the <strong>prop</strong></p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> columns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'Dog Name'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div></div>\n<p>We did not define an <strong>id</strong>, it is optional in our case. Because the path to the property is unique it will be used as the id. You can override it if you want.</p>\n<p>The table will also set the <strong>label</strong>, when not set. It will be the name of the property.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n These are just the basics, there are more to do with columns. We explore all capabilities on a feature basis in other pages.\n</blockquote>\n<h2 id=\"the-meta-column\"><a href=\"#the-meta-column\" aria-hidden><span class=\"icon icon-link\"></span></a>The Meta Column</h2>\n<p>Meta columns represent metadata, additional data not from the datasource. For example, columns for action buttons, aggregation, filtering, grouping, messaging and what not.</p>\n<p>All meta columns require a meta row host and all meta row's are positioned above (header) or below (footer) the data columns. By adding meta columns and assigning them to rows the rows are created. There is no limit to the number of meta rows you can use.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Do not confuse the header/footer parts of the data column with header/footer columns. Each data column has only 1 footer/header cell but you can add infinite number of header columns.\n</blockquote>\n<p>To bind a meta column to a meta row we use the <strong>rowIndex</strong> property which references the index of header/footer rows collection.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">HEADER_COLUMN_DEFINITION</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token string\">'myHeaderColumn'</span><span class=\"token punctuation\">,</span>\n  label<span class=\"token operator\">:</span> <span class=\"token string\">'A HEADER COLUMN'</span><span class=\"token punctuation\">,</span>\n  rowIndex<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>In this example, <strong>rowIndex: 0</strong> refers to the first header row from the top.</p>\n<p>Assigning row index to a column is quite messy, hard to track and error prone. The <a href=\"../factory\">columns factory</a> comes to the rescue doing\nall the indexing for us.</p>\n<h3 id=\"header-and-footer-columns\"><a href=\"#header-and-footer-columns\" aria-hidden><span class=\"icon icon-link\"></span></a>Header and Footer columns</h3>\n<p>Header and footer columns are defined with all base definition we covered above.</p>\n<p>If a label is provided, it will display but it can also be ignored based on the template.</p>\n<p>A table without meta columns. Each data column (id, name, gender, email) is defined once but it can reference 3 templates, header, cell and footer.</p>\n<div pbl-app-content-chunk=\"pbl-columns-app-content-chunk\" inputs='{ \"section\": 3 }'></div>\n<p>In this example, several meta columns are defined - spread across 3 rows.</p>\n<ul>\n<li>A header column in <strong>rowIndex</strong> 0</li>\n<li>A Group header column in <strong>rowIndex</strong> 1</li>\n<li>A footer column in <strong>rowIndex</strong> 0</li>\n</ul>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Note that the index count is unique for headers and for footers.\n</blockquote>\n<h2 id=\"the-column-set\"><a href=\"#the-column-set\" aria-hidden><span class=\"icon icon-link\"></span></a>The Column Set</h2>\n<p>Now that we've reviewed the different column types we can see how they all fit together.</p>\n<p>It's clear that a grid <strong>must</strong> have a valid list of <strong>one or more data columns</strong>, all other types are optional.</p>\n<p>Therefore, the grid requires a <strong>column set</strong> definition that describes the column structure of the grid with at least 1 data column.<br>\nThe column set is set in the input <code class=\"language-text\">PblNgridComponent.column</code>.</p>\n<p>As discussed above, column types can be either a JSON like object implementing an interface or the relevant concrete implementation.</p>\n<p>The interface for the column set:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblNgridColumnDefinitionSet</span> <span class=\"token punctuation\">{</span>\n  table<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    header<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblMetaRowDefinitions<span class=\"token punctuation\">;</span>\n    footer<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PblMetaRowDefinitions<span class=\"token punctuation\">;</span>\n    cols<span class=\"token operator\">:</span> PblColumnDefinition<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  header<span class=\"token operator\">:</span> PblColumnSet<span class=\"token operator\">&lt;</span>PblMetaColumnDefinition<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  footer<span class=\"token operator\">:</span> PblColumnSet<span class=\"token operator\">&lt;</span>PblMetaColumnDefinition<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  headerGroup<span class=\"token operator\">:</span> PblColumnSet<span class=\"token operator\">&lt;</span>PblColumnGroupDefinition<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>The <code class=\"language-text\">table</code> section represent the data columns (<code class=\"language-text\">table.cols</code>) and a single header and/or footer column for the data columns.<br>\nAll other sections represents array of meta rows, each item in the array is a collection of columns for that row.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The concrete implementation for the column set is \n<code class=\"language-text\">PblNgridColumnSet</code>\n which is also the output of the factory.\n</blockquote>\n<h2 id=\"runtime-changes\"><a href=\"#runtime-changes\" aria-hidden><span class=\"icon icon-link\"></span></a>Runtime Changes</h2>\n<p>When the columns are set (setting <code class=\"language-text\">PblNgridComponent.column</code>) they are evaluated and processed by the grid. The grid will <strong>create an internal column set</strong>, including a fresh\nnew instance for every column in the set. Wether its a simple JSON object or a concrete implementation, a new instance is created. The internal column set <strong>is not accessible</strong> and does not overwrite the <code class=\"language-text\">columns</code> property.</p>\n<p>This is to say that any change to the column set or any of it's child columns will not propagate to the column set stored in the grid.</p>\n<p>For example, changing the <code class=\"language-text\">width</code>, <code class=\"language-text\">css</code> or <code class=\"language-text\">sort</code> properties of a column will not reflect in the grid because the column instance you are doing the change on is not the one used by the grid.</p>\n<p>Instead, changes are done through APs, mainly the <code class=\"language-text\">ColumnApi</code> and sometimes other APIs.</p>\n<p>For example:</p>\n<ul>\n<li>To change the width of a data column, call <code class=\"language-text\">resizeColumn</code> in the <code class=\"language-text\">ColumnApi</code>.</li>\n<li>To swap or move a column use <code class=\"language-text\">swapColumns</code> or <code class=\"language-text\">moveColumn</code> in the <code class=\"language-text\">ColumnApi</code>.</li>\n</ul>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The \n<code class=\"language-text\">ColumnApi</code>\n also contains searching utilities to locate columns based on different parameters\n</blockquote>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n To automatically reflect column changes you need to replaces the entire \n<code class=\"language-text\">columns</code>\n array, this will invoke a column invalidation process which is\ncostly in terms of performance, thus not recommended.\n</blockquote>\n"}