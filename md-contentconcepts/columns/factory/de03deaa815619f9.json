{"id":"concepts/columns/factory","title":"Column Factory","contents":"<h1 id=\"the-column-factory\"><a href=\"#the-column-factory\" aria-hidden><span class=\"icon icon-link\"></span></a>The Column Factory</h1>\n<p>The goal of the column factory is to help us construct column structures for the table.</p>\n<p>The column factory features:</p>\n<ul>\n<li>Fluent API</li>\n<li>Default column definition</li>\n<li>Automatic assignment of header/footer/group columns into rows</li>\n</ul>\n<p>For simple column structures it might not seem to do much:</p>\n<div fxLayout>\n  <div fxFlex=\"50%\">\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> columnsSimpleModel <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  table<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'email'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n  </div>\n  <div fxFlex=\"50%\">\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> columnsSimpleModel <span class=\"token operator\">=</span> <span class=\"token function\">columnFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'email'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n  </div>\n</div>\n<p>But it comes handy when we have a complex column structure with multiple meta rows or when we want default values.</p>\n<p>Let's take this made up requirement for a table:</p>\n<ul>\n<li>Columns: ID, Name, Gender, Email, Country, Language</li>\n<li>A header row with 2 columns<ol>\n<li>Use the label <strong>Header1</strong> and set the width to 25%</li>\n<li>Use the label <strong>Header2</strong></li>\n</ol></li>\n<li>A group row with 1 group<ol>\n<li>Group the columns Name &#x26; Gender</li>\n</ol></li>\n<li>A header row with 1 column<ol>\n<li>Use the label <strong>Header3</strong></li>\n</ol></li>\n<li>A group row with 2 groups<ol>\n<li>Group the columns ID, Name &#x26; Gender</li>\n<li>Group the columns Country &#x26; Language</li>\n</ol></li>\n<li>A footer row with 2 columns<ol>\n<li>Use the label <strong>Footer1</strong> and set the width to 25%</li>\n<li>Use the label <strong>Footer2</strong></li>\n</ol></li>\n<li>A footer row with 1 column<ol>\n<li>Use the label <strong>Footer3</strong></li>\n</ol></li>\n</ul>\n<p>And: All columns must be at least 40px wide.</p>\n<div pbl-example-view=\"pbl-columns-factory-example\" containerClass=\"mat-elevation-z7\"></div>\n<p>All meta rows are set in the order they we're added.</p>\n<h2 id=\"the-static-build-pitfall\"><a href=\"#the-static-build-pitfall\" aria-hidden><span class=\"icon icon-link\"></span></a>The static build pitfall</h2>\n<p>The column factory has 2 steps:</p>\n<ul>\n<li><strong>Definition</strong>: Adding column configuration (header, table, footer)</li>\n<li><strong>Build</strong>: Building the <code class=\"language-text\">PblNgridColumnSet</code> for the configuration set in the <strong>definition step</strong></li>\n</ul>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/* Definition step */</span>\n<span class=\"token keyword\">const</span> factory<span class=\"token operator\">:</span> PblColumnFactory <span class=\"token operator\">=</span> <span class=\"token function\">columnFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* Build step */</span>\n<span class=\"token keyword\">const</span> columnSet<span class=\"token operator\">:</span> PblNgridColumnSet <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>In the definition step all data is stored as simple objects (POJO).<br>\nWhen we build, the factory takes these simple objects and convert them to the relevant column instances (<code class=\"language-text\">PblColumn</code>, <code class=\"language-text\">PblMetaColumn</code>, etc...).</p>\n<p>The table is extensible, plugins can add or modify behaviors including addition of new column definitions. For example, the <code class=\"language-text\">drag</code> plugin add the <code class=\"language-text\">reorder</code> property.\nto the table column definition.</p>\n<p>If we build a column set before a plugin was loaded new definitions added by the plugin might not persist.\nTo prevent any issues, avoid building column set's statically.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">STATIC_COLUMNS</span> <span class=\"token operator\">=</span> <span class=\"token function\">columnFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">COLUMN_FACTORY</span> <span class=\"token operator\">=</span> <span class=\"token function\">columnFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'my-component'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">{</span>\n  staticColumns <span class=\"token operator\">=</span> <span class=\"token constant\">STATIC_COLUMNS</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// BAD</span>\n\n  columns <span class=\"token operator\">=</span> <span class=\"token constant\">COLUMN_FACTORY</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// GOOD</span>\n\n  columns2 <span class=\"token operator\">=</span> <span class=\"token function\">columnFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\">// GOOD</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>The <code class=\"language-text\">STATIC_COLUMNS</code> are created before angular runs, maybe even before the plugins are loaded.</p>\n<p>The <code class=\"language-text\">COLUMN_FACTORY</code> object is not a column set, it's a factory instance, only when we call <code class=\"language-text\">build()</code> it will return a column set.\nBecause we call build when the component in instantiated we are sure all plugins are loaded at this point.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Plugins are loaded once we \n<code class=\"language-text\">import</code>\n them, so in theory if we import the plugins before our components we should be fine. This is true only in theory (and dev mode), in reality (prod)\nthe bundled output change the order modules are loaded so we can ensure it.\n</blockquote>\n"}