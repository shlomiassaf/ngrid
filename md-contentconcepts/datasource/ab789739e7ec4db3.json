{"id":"concepts/datasource/quick-through","title":"Quick-through","contents":"<h1 id=\"datasource-quickthrough\"><a href=\"#datasource-quickthrough\" aria-hidden><span class=\"icon icon-link\"></span></a>Datasource Quickthrough</h1>\n<p>The source for data items that show up as rows in the table.</p>\n<ul>\n<li>n<strong>Grid</strong> only works with 1 datasource: <code class=\"language-text\">PblDataSource</code> (class)</li>\n<li>The data source is a container of data items.</li>\n<li>Internally, <code class=\"language-text\">PblDataSource</code> always use's an array.</li>\n<li><code class=\"language-text\">Array</code>, <code class=\"language-text\">Promise&lt;Array&gt;</code> and <code class=\"language-text\">Observable&lt;Array&gt;</code> are also supported, internally transformed into a <code class=\"language-text\">PblDataSource</code>.</li>\n<li>n<strong>Grid</strong> provides a factory function to create instances of <code class=\"language-text\">PblDataSource</code> which you will probably use 99.99% of the times (manual creation is possible).</li>\n</ul>\n<h2 id=\"why-pbldatasource\"><a href=\"#why-pbldatasource\" aria-hidden><span class=\"icon icon-link\"></span></a>Why <code class=\"language-text\">PblDataSource</code></h2>\n<p>It's not crazy to assume that at the core of every grid out there, the low level rendering of rows is done on an array.</p>\n<p>n<strong>Grid</strong> is no different, so why the external API only works with <code class=\"language-text\">PblDataSource</code>?</p>\n<p>The complete answer to this question is complex, in top-level <code class=\"language-text\">PblDataSource</code> provides:</p>\n<ul>\n<li>Normalization and consistency.</li>\n<li>Well defined setup and teardown routines (safe memory management)</li>\n<li>Proper scheduling &#x26; event handling</li>\n<li>Unified interface to filtering / sorting / pagination</li>\n<li>Handling of subset view (virtual scrolling)</li>\n</ul>\n<p>In other words, it is an interface that simplifies the work with all of the scenarios we are facing.</p>\n<p>It makes it easy to:</p>\n<ul>\n<li>Update the datasource on-demand (active) or from an event (passive, e.g. next page in pagination clicked, sort clicked, etc...)</li>\n<li>Deffer when the table is initialized (data-size)</li>\n<li>Handle client or server scenarios differently but using the same interface</li>\n</ul>\n<p>And more...</p>\n<h2 id=\"datasource-factory-definitions\"><a href=\"#datasource-factory-definitions\" aria-hidden><span class=\"icon icon-link\"></span></a>Datasource Factory Definitions</h2>\n<p>The definitions are based on the scenario we need to support.</p>\n<p>There are 2 main scenarios the support all most all use-cases:</p>\n<ul>\n<li>Client side: The entire datasource is available in one collection</li>\n<li>Server side: A portion of the datasource is available</li>\n</ul>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n While rare, handling other scenario is possible through custom factory implementations.\n</blockquote>\n<p>For all scenarios there is one mandatory requirement - <strong>telling the factory how to fetch data</strong>.</p>\n<p>Other definitions will determine the desired <strong>behavior</strong>:</p>\n<ul>\n<li>How changes in filtering, sorting and pagination are handled</li>\n<li>Does the datasource die with the table or kept alive so it can move between tables?</li>\n<li>Does the datasource initialize automatically or we want to wait before fetching data for the first time?</li>\n</ul>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The \n<strong>behavior</strong>\n we define supports the scenario we are in and effect how we fetch data.\n</blockquote>\n<h2 id=\"client-side\"><a href=\"#client-side\" aria-hidden><span class=\"icon icon-link\"></span></a>Client Side</h2>\n<p>This is the default scenario, we only need define how to fetch data:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dataSource <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createDS</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token comment\">// or call a remote server to get all data...</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>In the example above we return a simple array but <code class=\"language-text\">Promise&lt;Array&gt;</code> and <code class=\"language-text\">Observable&lt;Array&gt;</code> are also supported.</p>\n<p>Because all of the collection is available the handling of filtering, sorting and pagination is done for us.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Note that filtering and sorting require matching descriptors but the entire streaming of the data is handled for us.\n</blockquote>\n<h2 id=\"server-side\"><a href=\"#server-side\" aria-hidden><span class=\"icon icon-link\"></span></a>Server Side</h2>\n<p>In this mode we only have access to subset of the collection, the best example here is paginated collections.\nUsually we want to handle all 3, filtering, sorting and pagination.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> dsCustomTrigger <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createDS</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">setCustomTriggers</span><span class=\"token punctuation\">(</span><span class=\"token string\">'filter'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pagination'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sort'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span> event <span class=\"token operator\">=></span> <span class=\"token comment\">/* get data from a remote server using filter,sort and pagination data stored in \"event\" */</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>We use <code class=\"language-text\">setCustomTriggers()</code> to opt-in for custom handling. When pagination data changes or when a filter or sort descriptor changes\nthe function we provided to <code class=\"language-text\">onTrigger()</code> gets invoked with the <code class=\"language-text\">event</code> object <code class=\"language-text\">PblDataSourceTriggerChangedEvent</code>.</p>\n<p>We use the <code class=\"language-text\">event</code> object to extract the information we need to make the call to the server, this will include (among other data):</p>\n<ul>\n<li>Pagination data (current page, current items per page, etc...)</li>\n<li>Current sort descriptor (The active sorted column and the sort direction)</li>\n<li>Current filter descriptor (the text to filter by and which fields (columns) to apply it on)</li>\n</ul>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n The filter descriptor also accepts a predicate function, avoid using predicates in server side mode as it makes no sense.\n</blockquote>\n"}