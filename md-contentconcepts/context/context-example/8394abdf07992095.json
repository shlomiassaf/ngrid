{"id":"concepts/context/what-is-the-context","title":"What is the Context","contents":"<h1 id=\"what-is-the-context\"><a href=\"#what-is-the-context\" aria-hidden><span class=\"icon icon-link\"></span></a>What is the Context</h1>\n<p>Each row in the grid has data, the row data is used to display the cells on each row.</p>\n<p>In addition to the data each row has a context object which is used to store state about the row and the cells of the row.</p>\n<h2 id=\"why\"><a href=\"#why\" aria-hidden><span class=\"icon icon-link\"></span></a>Why</h2>\n<p>Why do we need context? We need it so we can switch between various states a row/cell can be in and to persist that state.<br>\nFor example, the context will hold the <strong>editing</strong> state, indicating if a cell is currently in \"edit\" mode.</p>\n<p>This is just a simple example, the context becomes powerful when we start showing a small subset of the entire row collection.  </p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n I.E: When we use pagination, filtering and/or virtual scroll.\n</blockquote>\n<p>Let's explain with a simple example:</p>\n<div pbl-example-view=\"pbl-context-example-example\"></div>\n<p>The grid above is using pagination to split the data collection into \"pages\".<br>\nIn addition, each cell under the <strong>name</strong> column can be edited when double clicking on it with the mouse.</p>\n<p>When we active \"edit\" mode on a cell the context of the cell is updated and the edit flag is set to true.<br>\nNow, when a cell is being editing, if we click on the pagination \"next\" button we will see all rows replaced with new rows, the edit is gone.<br>\nNow, if we click the pagination \"back\" button we get back to our original view and now we see the edit back on, where we left it, thanks to the context.</p>\n<p>This is also true when toggling the sort component (click on the \"name\" column)</p>\n<h2 id=\"context--identity\"><a href=\"#context--identity\" aria-hidden><span class=\"icon icon-link\"></span></a>Context &#x26; Identity</h2>\n<p>To match context to a row, each row in the collection must be unique so when required we can easily match the row and the context.<br>\nThe order of the rows in the collection does not qualify, we've just seen how we can sort the collection creating a different order inside the collection.</p>\n<p>We need to mark the column that reflects the uniqueness of each row as the <a href=\"../../columns/identity\">Identity Column</a>.  </p>\n<p>In the example above we've marked the <code class=\"language-text\">id</code> column as the identity column by adding <code class=\"language-text\">pIndex: true</code> to the column definition.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n If there is no unique column context support is available but limited.\n</blockquote>\n<p>For example, if we remove the <code class=\"language-text\">pIndex</code> from the example above, each click for sort/pagination will clear the cache since\nthere is no way for the context to identify and match exiting context to rows.</p>\n<h2 id=\"the-data-row-context\"><a href=\"#the-data-row-context\" aria-hidden><span class=\"icon icon-link\"></span></a>The Data Row Context</h2>\n<p>The data row context is the object which holds the state of a data row (including the row's data item) and some methods to operate on the context.</p>\n<p>Let's first focus on the properties:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PblNgridRowContext<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** Data for the row that this cell is located within. */</span>\n  $implicit<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** Length of the number of total rows rendered rows. */</span>\n  count<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** True if this cell is contained in the first row. */</span>\n  first<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** True if this cell is contained in the last row. */</span>\n  last<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** True if this cell is contained in a row with an even-numbered index. */</span>\n  even<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** True if this cell is contained in a row with an odd-numbered index. */</span>\n  odd<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/** The identity of this row */</span>\n  identity<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * When true, it is the first time that the row is rendered.\n   * Once the row leaves the view this will be false and will not change.\n   *\n   * Note that rendered items might appear outside of the viewport if virtual scroll is not set and\n   * when set but the row is rendered as part of the buffer.\n   *\n   * This is relevant only when virtual scroll is set.\n   */</span>\n  firstRender<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * When true, indicates that the row is rendered outside of the viewport.\n   *\n   * The indicator is updated when rows are rendered (i.e. not live, on scroll events).\n   * Understanding this behavior is important!!!\n   *\n   * Note that when virtual scroll is enabled `true` indicates a buffer row.\n   */</span>\n  outOfView<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/** The index at the datasource */</span>\n  dsIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">readonly</span> grid<span class=\"token operator\">:</span> PblNgridComponent<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * Returns the length of cells context stored in this row\n   */</span>\n  <span class=\"token keyword\">readonly</span> length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p><code class=\"language-text\">$implicit</code> is the actual data row and the default property provided by angular.<br>\nAll other properties are straight forwards, let's see them in action:</p>\n<div pbl-example-view=\"pbl-context-object-example\"></div>\n<blockquote>\n<p>When using <a href=\"../../../features/grid/virtual-scroll/what-is-virtual-scroll\">virtual scroll</a>, <code class=\"language-text\">count</code> represents the rendered rows, not the total rows.</p>\n</blockquote>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<code class=\"language-text\">identity</code>\n is populated based on the \n<a href=\"../../columns/identity\">identity column</a>\n, if none define the data index is used.\n</blockquote>\n<h2 id=\"context-pitfalls\"><a href=\"#context-pitfalls\" aria-hidden><span class=\"icon icon-link\"></span></a>Context Pitfalls</h2>\n<p>Some key points:</p>\n<ul>\n<li>Context is state and managing state, as we all now, is <strong>hard</strong>.</li>\n<li><strong>nGrid</strong> is a composition of multiple features. Some interact with each other, some are native and some are plugins.</li>\n</ul>\n<p>Depending on the complexity of each feature and the areas in which it has effect on, managing the context might be tricky.  </p>\n<p>For example, filtering is an operation which modifies the existing dataset.<br>\nFrom here, things diverge based on the components used in <strong>nGrid</strong>.</p>\n<p>If the datasource implementation handles filtering on the <strong>server</strong> the entire datasource is replaced on each filtering operation.<br>\nHowever, when filtering is done on the existing datasource, it is kept in memory but only a portion of it is actually used.</p>\n<p>Each behavior impact the context differently. Filtering on the server will clear the context, filtering on the client will keep it.</p>\n<p>Additional features on top of the above? more complexity!</p>\n<p>For example, the <code class=\"language-text\">Dynamic Virtual Scroll</code> strategy is sensitive to filtering, regardless of it's origin, other virtual scroll strategies might be less sensitive.\nIt is all based on the implementation.</p>\n<p>In general, virtual scroll operations and different datasource implementations (e.e. Infinite Scroll) might have context specific behaviors.<br>\nRead the documentation of the features you use for more information.</p>\n"}