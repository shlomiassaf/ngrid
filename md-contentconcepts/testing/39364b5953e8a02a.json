{"id":"concepts/testing/unit-testing","title":"Unit Testing","contents":"<h1 id=\"unit-testing\"><a href=\"#unit-testing\" aria-hidden><span class=\"icon icon-link\"></span></a>Unit Testing</h1>\n<p><strong>nGrid</strong> comes with built in helpers to support unit testing of the grid.</p>\n<p>The helpers are actually classes that encapsulate internal logic done by the grid and allow the tester to focus on testing\nwhat's required for the task at hand.</p>\n<p>These classes are called <a href=\"https://material.angular.io/cdk/test-harnesses/overview\">Component test harnesses</a> and they are part\nof the test harness suite provided by the angular cdk, you can read more about it <a href=\"https://material.angular.io/cdk/test-harnesses/overview\">here</a>.</p>\n<p>The helpers are not coupled with any testing framework or runners. You can use them with karma or with protractor to execute E2E tests.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Using the harness is optional, you can use them to test most of the scenarios however, if you need to use plain old unit testing\ntechniques you are free to do so.\n</blockquote>\n<h2 id=\"ngrid-component-harness\"><a href=\"#ngrid-component-harness\" aria-hidden><span class=\"icon icon-link\"></span></a>NGrid Component Harness</h2>\n<p>The main harness used to interact with <strong>nGrid</strong> is <code class=\"language-text\">PblNgridHarness</code> located in <code class=\"language-text\">@pebula/ngrid/testing</code>.  </p>\n<p>From <code class=\"language-text\">PblNgridHarness</code> you can query for other harness components that wrap cells, columns, rows and other building blocks.</p>\n<p>For example, <code class=\"language-text\">PblNgridHarness.getViewPortData()</code> will return a <code class=\"language-text\">string[][]</code> which represents the currently rendered row matrix\nwith cell data as it is rendered in the DOM.</p>\n<p><code class=\"language-text\">getViewPortData()</code> is helper function which uses the row harness component <code class=\"language-text\">PblNgridDataRowHarness</code> to get all rows\nand in each row, the <code class=\"language-text\">PblNgridColumnHeaderCellHarness</code> component to get each cell.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The entire documentation site is using nGrid's test harness components.\n</blockquote>\n<h2 id=\"testing-ngrid-with-jest-using-jsdom\"><a href=\"#testing-ngrid-with-jest-using-jsdom\" aria-hidden><span class=\"icon icon-link\"></span></a>Testing nGrid with Jest using JSDom</h2>\n<p>The component harness helpers will work with any framework / runner, including Jest, however using Jest with JSDOM is not\nrecommended.</p>\n<p>Wether you use the component harness or not, using Jest exposes a limited set of UI functionality when testing.<br>\nThis is true in general, but has a deep impact on big UI components like <strong>nGrid</strong>.</p>\n<p>Jest uses JSDOM to allow fest unit testing but it comes with a cost, it is not a browser.<br>\nThere is no layout rendering, no CSS calculation, no scroll API support and more.</p>\n<p>This does not allow proper UI testing for a component such as the grid.\nFor example, it is nearly impossible to deep test the grid with virtual scroll enabled since it is not possible to scroll.\nThis will also be true when working with grid's that have a lot of columns which exceed the viewport size, you will not be able\nto bring them into the view, no scrolling.</p>\n<p>That being said, if you're already using Jest you might not have any other option but to use it.<br>\nThe component harness helpers will work but some functionality will not.</p>\n<p>You will be able to test columns, data and other functionality but not all.</p>\n"}